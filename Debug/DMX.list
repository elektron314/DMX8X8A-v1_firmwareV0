
DMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e94  08008e94  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008e94  08008e94  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e94  08008e94  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  2000017c  08009018  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  08009018  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019089  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003847  00000000  00000000  0003922e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003dd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b822  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016da7  00000000  00000000  0005a6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000942b5  00000000  00000000  00071479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010572e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  00105784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e0c 	.word	0x08008e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008e0c 	.word	0x08008e0c

0800014c <Rotary>:
//#define S1_2_GPIO_Port GPIOB
//#define S1_1_Pin GPIO_PIN_9
//#define S1_1_GPIO_Port GPIOB

uint8_t Rotary(uint8_t S)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t In1, In2, In3, In4;

	switch (S)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b03      	cmp	r3, #3
 800015a:	d03a      	beq.n	80001d2 <Rotary+0x86>
 800015c:	2b03      	cmp	r3, #3
 800015e:	dc55      	bgt.n	800020c <Rotary+0xc0>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d002      	beq.n	800016a <Rotary+0x1e>
 8000164:	2b02      	cmp	r3, #2
 8000166:	d01b      	beq.n	80001a0 <Rotary+0x54>
 8000168:	e050      	b.n	800020c <Rotary+0xc0>
	{
	case 1:
		In1 = HAL_GPIO_ReadPin(S1_1_GPIO_Port, S1_1_Pin);
 800016a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016e:	487d      	ldr	r0, [pc, #500]	; (8000364 <Rotary+0x218>)
 8000170:	f001 fc60 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	73fb      	strb	r3, [r7, #15]
		In2 = HAL_GPIO_ReadPin(S1_2_GPIO_Port, S1_2_Pin);
 8000178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017c:	4879      	ldr	r0, [pc, #484]	; (8000364 <Rotary+0x218>)
 800017e:	f001 fc59 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	73bb      	strb	r3, [r7, #14]
		In3 = HAL_GPIO_ReadPin(S1_3_GPIO_Port, S1_3_Pin);
 8000186:	2180      	movs	r1, #128	; 0x80
 8000188:	4876      	ldr	r0, [pc, #472]	; (8000364 <Rotary+0x218>)
 800018a:	f001 fc53 	bl	8001a34 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	737b      	strb	r3, [r7, #13]
		In4 = HAL_GPIO_ReadPin(S1_4_GPIO_Port, S1_4_Pin);
 8000192:	2120      	movs	r1, #32
 8000194:	4873      	ldr	r0, [pc, #460]	; (8000364 <Rotary+0x218>)
 8000196:	f001 fc4d 	bl	8001a34 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	733b      	strb	r3, [r7, #12]
		break;
 800019e:	e050      	b.n	8000242 <Rotary+0xf6>
	case 2:
		In1 = HAL_GPIO_ReadPin(S2_1_GPIO_Port, S2_1_Pin);
 80001a0:	2104      	movs	r1, #4
 80001a2:	4871      	ldr	r0, [pc, #452]	; (8000368 <Rotary+0x21c>)
 80001a4:	f001 fc46 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	73fb      	strb	r3, [r7, #15]
		In2 = HAL_GPIO_ReadPin(S2_2_GPIO_Port, S2_2_Pin);
 80001ac:	2108      	movs	r1, #8
 80001ae:	486d      	ldr	r0, [pc, #436]	; (8000364 <Rotary+0x218>)
 80001b0:	f001 fc40 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	73bb      	strb	r3, [r7, #14]
		In3 = HAL_GPIO_ReadPin(S2_3_GPIO_Port, S2_3_Pin);
 80001b8:	2140      	movs	r1, #64	; 0x40
 80001ba:	486a      	ldr	r0, [pc, #424]	; (8000364 <Rotary+0x218>)
 80001bc:	f001 fc3a 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	737b      	strb	r3, [r7, #13]
		In4 = HAL_GPIO_ReadPin(S2_4_GPIO_Port, S2_4_Pin);
 80001c4:	2110      	movs	r1, #16
 80001c6:	4867      	ldr	r0, [pc, #412]	; (8000364 <Rotary+0x218>)
 80001c8:	f001 fc34 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	733b      	strb	r3, [r7, #12]
		break;
 80001d0:	e037      	b.n	8000242 <Rotary+0xf6>
	case 3:
		In1 = HAL_GPIO_ReadPin(S3_1_GPIO_Port, S3_1_Pin);
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	4865      	ldr	r0, [pc, #404]	; (800036c <Rotary+0x220>)
 80001d8:	f001 fc2c 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	73fb      	strb	r3, [r7, #15]
		In2 = HAL_GPIO_ReadPin(S3_2_GPIO_Port, S3_2_Pin);
 80001e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e4:	4861      	ldr	r0, [pc, #388]	; (800036c <Rotary+0x220>)
 80001e6:	f001 fc25 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	73bb      	strb	r3, [r7, #14]
		In3 = HAL_GPIO_ReadPin(S3_3_GPIO_Port, S3_3_Pin);
 80001ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f2:	485f      	ldr	r0, [pc, #380]	; (8000370 <Rotary+0x224>)
 80001f4:	f001 fc1e 	bl	8001a34 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	737b      	strb	r3, [r7, #13]
		In4 = HAL_GPIO_ReadPin(S3_4_GPIO_Port, S3_4_Pin);
 80001fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000200:	485a      	ldr	r0, [pc, #360]	; (800036c <Rotary+0x220>)
 8000202:	f001 fc17 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	733b      	strb	r3, [r7, #12]
		break;
 800020a:	e01a      	b.n	8000242 <Rotary+0xf6>
	default:
		In1 = HAL_GPIO_ReadPin(S1_1_GPIO_Port, S1_1_Pin);
 800020c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000210:	4854      	ldr	r0, [pc, #336]	; (8000364 <Rotary+0x218>)
 8000212:	f001 fc0f 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	73fb      	strb	r3, [r7, #15]
		In2 = HAL_GPIO_ReadPin(S1_2_GPIO_Port, S1_2_Pin);
 800021a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021e:	4851      	ldr	r0, [pc, #324]	; (8000364 <Rotary+0x218>)
 8000220:	f001 fc08 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000224:	4603      	mov	r3, r0
 8000226:	73bb      	strb	r3, [r7, #14]
		In3 = HAL_GPIO_ReadPin(S1_3_GPIO_Port, S1_3_Pin);
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	484e      	ldr	r0, [pc, #312]	; (8000364 <Rotary+0x218>)
 800022c:	f001 fc02 	bl	8001a34 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	737b      	strb	r3, [r7, #13]
		In4 = HAL_GPIO_ReadPin(S1_4_GPIO_Port, S1_4_Pin);
 8000234:	2120      	movs	r1, #32
 8000236:	484b      	ldr	r0, [pc, #300]	; (8000364 <Rotary+0x218>)
 8000238:	f001 fbfc 	bl	8001a34 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	733b      	strb	r3, [r7, #12]
		break;
 8000240:	bf00      	nop
	}

	if (In1 == 0 && In2 == 0 && In3 == 0 && In4 == 0)
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d10a      	bne.n	800025e <Rotary+0x112>
 8000248:	7bbb      	ldrb	r3, [r7, #14]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d107      	bne.n	800025e <Rotary+0x112>
 800024e:	7b7b      	ldrb	r3, [r7, #13]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d104      	bne.n	800025e <Rotary+0x112>
 8000254:	7b3b      	ldrb	r3, [r7, #12]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d101      	bne.n	800025e <Rotary+0x112>
		return 0;
 800025a:	2300      	movs	r3, #0
 800025c:	e07e      	b.n	800035c <Rotary+0x210>
	if (In1 == 1 && In2 == 0 && In3 == 0 && In4 == 0)
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d10a      	bne.n	800027a <Rotary+0x12e>
 8000264:	7bbb      	ldrb	r3, [r7, #14]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d107      	bne.n	800027a <Rotary+0x12e>
 800026a:	7b7b      	ldrb	r3, [r7, #13]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <Rotary+0x12e>
 8000270:	7b3b      	ldrb	r3, [r7, #12]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <Rotary+0x12e>
		return 1;
 8000276:	2301      	movs	r3, #1
 8000278:	e070      	b.n	800035c <Rotary+0x210>
	if (In1 == 0 && In2 == 0 && In3 == 1 && In4 == 0)
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d10a      	bne.n	8000296 <Rotary+0x14a>
 8000280:	7bbb      	ldrb	r3, [r7, #14]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <Rotary+0x14a>
 8000286:	7b7b      	ldrb	r3, [r7, #13]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d104      	bne.n	8000296 <Rotary+0x14a>
 800028c:	7b3b      	ldrb	r3, [r7, #12]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <Rotary+0x14a>
		return 2;
 8000292:	2302      	movs	r3, #2
 8000294:	e062      	b.n	800035c <Rotary+0x210>
	if (In1 == 1 && In2 == 0 && In3 == 1 && In4 == 0)
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d10a      	bne.n	80002b2 <Rotary+0x166>
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d107      	bne.n	80002b2 <Rotary+0x166>
 80002a2:	7b7b      	ldrb	r3, [r7, #13]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d104      	bne.n	80002b2 <Rotary+0x166>
 80002a8:	7b3b      	ldrb	r3, [r7, #12]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d101      	bne.n	80002b2 <Rotary+0x166>
		return 3;
 80002ae:	2303      	movs	r3, #3
 80002b0:	e054      	b.n	800035c <Rotary+0x210>
	if (In1 == 0 && In2 == 1 && In3 == 0 && In4 == 0)
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d10a      	bne.n	80002ce <Rotary+0x182>
 80002b8:	7bbb      	ldrb	r3, [r7, #14]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d107      	bne.n	80002ce <Rotary+0x182>
 80002be:	7b7b      	ldrb	r3, [r7, #13]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d104      	bne.n	80002ce <Rotary+0x182>
 80002c4:	7b3b      	ldrb	r3, [r7, #12]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d101      	bne.n	80002ce <Rotary+0x182>
		return 4;
 80002ca:	2304      	movs	r3, #4
 80002cc:	e046      	b.n	800035c <Rotary+0x210>
	if (In1 == 1 && In2 == 1 && In3 == 0 && In4 == 0)
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d10a      	bne.n	80002ea <Rotary+0x19e>
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d107      	bne.n	80002ea <Rotary+0x19e>
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d104      	bne.n	80002ea <Rotary+0x19e>
 80002e0:	7b3b      	ldrb	r3, [r7, #12]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d101      	bne.n	80002ea <Rotary+0x19e>
		return 5;
 80002e6:	2305      	movs	r3, #5
 80002e8:	e038      	b.n	800035c <Rotary+0x210>
	if (In1 == 0 && In2 == 1 && In3 == 1 && In4 == 0)
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d10a      	bne.n	8000306 <Rotary+0x1ba>
 80002f0:	7bbb      	ldrb	r3, [r7, #14]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d107      	bne.n	8000306 <Rotary+0x1ba>
 80002f6:	7b7b      	ldrb	r3, [r7, #13]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d104      	bne.n	8000306 <Rotary+0x1ba>
 80002fc:	7b3b      	ldrb	r3, [r7, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d101      	bne.n	8000306 <Rotary+0x1ba>
		return 6;
 8000302:	2306      	movs	r3, #6
 8000304:	e02a      	b.n	800035c <Rotary+0x210>
	if (In1 == 1 && In2 == 1 && In3 == 1 && In4 == 0)
 8000306:	7bfb      	ldrb	r3, [r7, #15]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d10a      	bne.n	8000322 <Rotary+0x1d6>
 800030c:	7bbb      	ldrb	r3, [r7, #14]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d107      	bne.n	8000322 <Rotary+0x1d6>
 8000312:	7b7b      	ldrb	r3, [r7, #13]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d104      	bne.n	8000322 <Rotary+0x1d6>
 8000318:	7b3b      	ldrb	r3, [r7, #12]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Rotary+0x1d6>
		return 7;
 800031e:	2307      	movs	r3, #7
 8000320:	e01c      	b.n	800035c <Rotary+0x210>
	if (In1 == 0 && In2 == 0 && In3 == 0 && In4 == 1)
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10a      	bne.n	800033e <Rotary+0x1f2>
 8000328:	7bbb      	ldrb	r3, [r7, #14]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d107      	bne.n	800033e <Rotary+0x1f2>
 800032e:	7b7b      	ldrb	r3, [r7, #13]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <Rotary+0x1f2>
 8000334:	7b3b      	ldrb	r3, [r7, #12]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d101      	bne.n	800033e <Rotary+0x1f2>
		return 8;
 800033a:	2308      	movs	r3, #8
 800033c:	e00e      	b.n	800035c <Rotary+0x210>
	if (In1 == 1 && In2 == 0 && In3 == 0 && In4 == 1)
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d10a      	bne.n	800035a <Rotary+0x20e>
 8000344:	7bbb      	ldrb	r3, [r7, #14]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d107      	bne.n	800035a <Rotary+0x20e>
 800034a:	7b7b      	ldrb	r3, [r7, #13]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d104      	bne.n	800035a <Rotary+0x20e>
 8000350:	7b3b      	ldrb	r3, [r7, #12]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d101      	bne.n	800035a <Rotary+0x20e>
		return 9;
 8000356:	2309      	movs	r3, #9
 8000358:	e000      	b.n	800035c <Rotary+0x210>
	else return 0;
 800035a:	2300      	movs	r3, #0
}
 800035c:	4618      	mov	r0, r3
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010c00 	.word	0x40010c00
 8000368:	40011400 	.word	0x40011400
 800036c:	40011000 	.word	0x40011000
 8000370:	40010800 	.word	0x40010800

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b598      	push	{r3, r4, r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fe3a 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f88a 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 fb38 	bl	80009f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000384:	f000 f8e4 	bl	8000550 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000388:	f000 f920 	bl	80005cc <MX_ADC2_Init>
  MX_TIM1_Init();
 800038c:	f000 f95c 	bl	8000648 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000390:	f000 f9da 	bl	8000748 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000394:	f000 fa6e 	bl	8000874 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000398:	f000 fb02 	bl	80009a0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800039c:	f008 f88e 	bl	80084bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003a0:	2100      	movs	r1, #0
 80003a2:	4837      	ldr	r0, [pc, #220]	; (8000480 <main+0x10c>)
 80003a4:	f003 fc9a 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003a8:	2104      	movs	r1, #4
 80003aa:	4835      	ldr	r0, [pc, #212]	; (8000480 <main+0x10c>)
 80003ac:	f003 fc96 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003b0:	2108      	movs	r1, #8
 80003b2:	4833      	ldr	r0, [pc, #204]	; (8000480 <main+0x10c>)
 80003b4:	f003 fc92 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80003b8:	210c      	movs	r1, #12
 80003ba:	4831      	ldr	r0, [pc, #196]	; (8000480 <main+0x10c>)
 80003bc:	f003 fc8e 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003c0:	2100      	movs	r1, #0
 80003c2:	4830      	ldr	r0, [pc, #192]	; (8000484 <main+0x110>)
 80003c4:	f003 fc8a 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003c8:	2104      	movs	r1, #4
 80003ca:	482e      	ldr	r0, [pc, #184]	; (8000484 <main+0x110>)
 80003cc:	f003 fc86 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003d0:	2108      	movs	r1, #8
 80003d2:	482c      	ldr	r0, [pc, #176]	; (8000484 <main+0x110>)
 80003d4:	f003 fc82 	bl	8003cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003d8:	210c      	movs	r1, #12
 80003da:	482a      	ldr	r0, [pc, #168]	; (8000484 <main+0x110>)
 80003dc:	f003 fc7e 	bl	8003cdc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(uLED1_GPIO_Port, uLED1_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e6:	4828      	ldr	r0, [pc, #160]	; (8000488 <main+0x114>)
 80003e8:	f001 fb3b 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED2_GPIO_Port, uLED2_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	4825      	ldr	r0, [pc, #148]	; (8000488 <main+0x114>)
 80003f2:	f001 fb36 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED3_GPIO_Port, uLED3_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4823      	ldr	r0, [pc, #140]	; (8000488 <main+0x114>)
 80003fc:	f001 fb31 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED4_GPIO_Port, uLED4_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000406:	4821      	ldr	r0, [pc, #132]	; (800048c <main+0x118>)
 8000408:	f001 fb2b 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800040c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000410:	f000 fe50 	bl	80010b4 <HAL_Delay>
	  HAL_GPIO_WritePin(uLED1_GPIO_Port, uLED1_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	481b      	ldr	r0, [pc, #108]	; (8000488 <main+0x114>)
 800041c:	f001 fb21 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED2_GPIO_Port, uLED2_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	4818      	ldr	r0, [pc, #96]	; (8000488 <main+0x114>)
 8000426:	f001 fb1c 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED3_GPIO_Port, uLED3_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2140      	movs	r1, #64	; 0x40
 800042e:	4816      	ldr	r0, [pc, #88]	; (8000488 <main+0x114>)
 8000430:	f001 fb17 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(uLED4_GPIO_Port, uLED4_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <main+0x118>)
 800043c:	f001 fb11 	bl	8001a62 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f000 fe36 	bl	80010b4 <HAL_Delay>

	  duty = Rotary(1)*10+Rotary(2);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff fe7f 	bl	800014c <Rotary>
 800044e:	4603      	mov	r3, r0
 8000450:	461a      	mov	r2, r3
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	4413      	add	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	b2dc      	uxtb	r4, r3
 800045a:	2002      	movs	r0, #2
 800045c:	f7ff fe76 	bl	800014c <Rotary>
 8000460:	4603      	mov	r3, r0
 8000462:	4423      	add	r3, r4
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <main+0x11c>)
 8000468:	701a      	strb	r2, [r3, #0]
	  htim2.Instance->CCR1 = duty;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <main+0x11c>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <main+0x10c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1 = duty;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <main+0x11c>)
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <main+0x110>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(uLED1_GPIO_Port, uLED1_Pin, GPIO_PIN_SET);
 800047e:	e7af      	b.n	80003e0 <main+0x6c>
 8000480:	200004ec 	.word	0x200004ec
 8000484:	200003ec 	.word	0x200003ec
 8000488:	40011000 	.word	0x40011000
 800048c:	40010c00 	.word	0x40010c00
 8000490:	20000198 	.word	0x20000198

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b094      	sub	sp, #80	; 0x50
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049e:	2228      	movs	r2, #40	; 0x28
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f008 fcaa 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c4:	2301      	movs	r3, #1
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80004ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	2301      	movs	r3, #1
 80004d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d8:	2302      	movs	r3, #2
 80004da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fe7b 	bl	80031e8 <HAL_RCC_OscConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004f8:	f000 fb28 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fc:	230f      	movs	r3, #15
 80004fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000500:	2302      	movs	r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2102      	movs	r1, #2
 8000518:	4618      	mov	r0, r3
 800051a:	f003 f8e5 	bl	80036e8 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000524:	f000 fb12 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000528:	2312      	movs	r3, #18
 800052a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800052c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000530:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fa71 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000544:	f000 fb02 	bl	8000b4c <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3750      	adds	r7, #80	; 0x50
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_ADC1_Init+0x74>)
 8000562:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <MX_ADC1_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MX_ADC1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_ADC1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_ADC1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_ADC1_Init+0x74>)
 800057a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800057e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_ADC1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_ADC1_Init+0x74>)
 8000588:	2201      	movs	r2, #1
 800058a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_ADC1_Init+0x74>)
 800058e:	f000 fdb5 	bl	80010fc <HAL_ADC_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000598:	f000 fad8 	bl	8000b4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800059c:	230a      	movs	r3, #10
 800059e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_ADC1_Init+0x74>)
 80005ae:	f000 fe7d 	bl	80012ac <HAL_ADC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005b8:	f000 fac8 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000434 	.word	0x20000434
 80005c8:	40012400 	.word	0x40012400

080005cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC2_Init+0x74>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC2_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC2_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC2_Init+0x74>)
 80005f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC2_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC2_Init+0x74>)
 800060a:	f000 fd77 	bl	80010fc <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 fa9a 	bl	8000b4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000618:	2304      	movs	r3, #4
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC2_Init+0x74>)
 800062a:	f000 fe3f 	bl	80012ac <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000634:	f000 fa8a 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200003bc 	.word	0x200003bc
 8000644:	40012800 	.word	0x40012800

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000674:	4a33      	ldr	r2, [pc, #204]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60-1;
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <MX_TIM1_Init+0xf8>)
 800067a:	223b      	movs	r2, #59	; 0x3b
 800067c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000686:	2263      	movs	r2, #99	; 0x63
 8000688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_TIM1_Init+0xf8>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <MX_TIM1_Init+0xf8>)
 800069e:	f003 fa75 	bl	8003b8c <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x64>
  {
    Error_Handler();
 80006a8:	f000 fa50 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4619      	mov	r1, r3
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_TIM1_Init+0xf8>)
 80006ba:	f003 fd5b 	bl	8004174 <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006c4:	f000 fa42 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80006c8:	481d      	ldr	r0, [pc, #116]	; (8000740 <MX_TIM1_Init+0xf8>)
 80006ca:	f003 fba9 	bl	8003e20 <HAL_TIM_IC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006d4:	f000 fa3a 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4816      	ldr	r0, [pc, #88]	; (8000740 <MX_TIM1_Init+0xf8>)
 80006e8:	f004 f9ba 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80006f2:	f000 fa2b 	bl	8000b4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_TIM1_Init+0xf8>)
 800070e:	f003 fbdf 	bl	8003ed0 <HAL_TIM_IC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000718:	f000 fa18 	bl	8000b4c <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800071c:	2302      	movs	r3, #2
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2204      	movs	r2, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_TIM1_Init+0xf8>)
 8000728:	f003 fbd2 	bl	8003ed0 <HAL_TIM_IC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000732:	f000 fa0b 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3728      	adds	r7, #40	; 0x28
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200004a4 	.word	0x200004a4
 8000744:	40012c00 	.word	0x40012c00

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_TIM2_Init+0x128>)
 800077a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8000780:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <MX_TIM2_Init+0x128>)
 8000782:	223b      	movs	r2, #59	; 0x3b
 8000784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_TIM2_Init+0x128>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800078c:	4b38      	ldr	r3, [pc, #224]	; (8000870 <MX_TIM2_Init+0x128>)
 800078e:	2263      	movs	r2, #99	; 0x63
 8000790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b37      	ldr	r3, [pc, #220]	; (8000870 <MX_TIM2_Init+0x128>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <MX_TIM2_Init+0x128>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <MX_TIM2_Init+0x128>)
 80007a0:	f003 f9f4 	bl	8003b8c <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007aa:	f000 f9cf 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b8:	4619      	mov	r1, r3
 80007ba:	482d      	ldr	r0, [pc, #180]	; (8000870 <MX_TIM2_Init+0x128>)
 80007bc:	f003 fcda 	bl	8004174 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007c6:	f000 f9c1 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ca:	4829      	ldr	r0, [pc, #164]	; (8000870 <MX_TIM2_Init+0x128>)
 80007cc:	f003 fa2d 	bl	8003c2a <HAL_TIM_PWM_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007d6:	f000 f9b9 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	4619      	mov	r1, r3
 80007e8:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_TIM2_Init+0x128>)
 80007ea:	f004 f939 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007f4:	f000 f9aa 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <MX_TIM2_Init+0x128>)
 8000810:	f003 fbf2 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800081a:	f000 f997 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2204      	movs	r2, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_TIM2_Init+0x128>)
 8000826:	f003 fbe7 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000830:	f000 f98c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2208      	movs	r2, #8
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_TIM2_Init+0x128>)
 800083c:	f003 fbdc 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000846:	f000 f981 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	220c      	movs	r2, #12
 800084e:	4619      	mov	r1, r3
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM2_Init+0x128>)
 8000852:	f003 fbd1 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800085c:	f000 f976 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM2_Init+0x128>)
 8000862:	f000 fa8f 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000866:	bf00      	nop
 8000868:	3738      	adds	r7, #56	; 0x38
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200004ec 	.word	0x200004ec

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_TIM3_Init+0x124>)
 80008a6:	4a3d      	ldr	r2, [pc, #244]	; (800099c <MX_TIM3_Init+0x128>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_TIM3_Init+0x124>)
 80008ac:	223b      	movs	r2, #59	; 0x3b
 80008ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_TIM3_Init+0x124>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_TIM3_Init+0x124>)
 80008b8:	2263      	movs	r2, #99	; 0x63
 80008ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_TIM3_Init+0x124>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_TIM3_Init+0x124>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c8:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_TIM3_Init+0x124>)
 80008ca:	f003 f95f 	bl	8003b8c <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008d4:	f000 f93a 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	4619      	mov	r1, r3
 80008e4:	482c      	ldr	r0, [pc, #176]	; (8000998 <MX_TIM3_Init+0x124>)
 80008e6:	f003 fc45 	bl	8004174 <HAL_TIM_ConfigClockSource>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008f0:	f000 f92c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f4:	4828      	ldr	r0, [pc, #160]	; (8000998 <MX_TIM3_Init+0x124>)
 80008f6:	f003 f998 	bl	8003c2a <HAL_TIM_PWM_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 f924 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4619      	mov	r1, r3
 8000912:	4821      	ldr	r0, [pc, #132]	; (8000998 <MX_TIM3_Init+0x124>)
 8000914:	f004 f8a4 	bl	8004a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800091e:	f000 f915 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000922:	2360      	movs	r3, #96	; 0x60
 8000924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4817      	ldr	r0, [pc, #92]	; (8000998 <MX_TIM3_Init+0x124>)
 800093a:	f003 fb5d 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000944:	f000 f902 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2204      	movs	r2, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4812      	ldr	r0, [pc, #72]	; (8000998 <MX_TIM3_Init+0x124>)
 8000950:	f003 fb52 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800095a:	f000 f8f7 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2208      	movs	r2, #8
 8000962:	4619      	mov	r1, r3
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_TIM3_Init+0x124>)
 8000966:	f003 fb47 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000970:	f000 f8ec 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	220c      	movs	r2, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM3_Init+0x124>)
 800097c:	f003 fb3c 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8000986:	f000 f8e1 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM3_Init+0x124>)
 800098c:	f000 f9fa 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3738      	adds	r7, #56	; 0x38
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200003ec 	.word	0x200003ec
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART1_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART1_UART_Init+0x4c>)
 80009d8:	f004 f8a0 	bl	8004b1c <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f000 f8b3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000464 	.word	0x20000464
 80009f0:	40013800 	.word	0x40013800

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a20:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a44      	ldr	r2, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a3e      	ldr	r2, [pc, #248]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <MX_GPIO_Init+0x144>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4833      	ldr	r0, [pc, #204]	; (8000b3c <MX_GPIO_Init+0x148>)
 8000a70:	f000 fff7 	bl	8001a62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uLED4_GPIO_Port, uLED4_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	4831      	ldr	r0, [pc, #196]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a7c:	f000 fff1 	bl	8001a62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uLED3_Pin|uLED2_Pin|uLED1_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000a86:	482d      	ldr	r0, [pc, #180]	; (8000b3c <MX_GPIO_Init+0x148>)
 8000a88:	f000 ffeb 	bl	8001a62 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 uLED3_Pin uLED2_Pin uLED1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|uLED3_Pin|uLED2_Pin|uLED1_Pin;
 8000a8c:	f44f 5307 	mov.w	r3, #8640	; 0x21c0
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4825      	ldr	r0, [pc, #148]	; (8000b3c <MX_GPIO_Init+0x148>)
 8000aa6:	f000 fe41 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : uLED4_Pin */
  GPIO_InitStruct.Pin = uLED4_Pin;
 8000aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uLED4_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000ac4:	f000 fe32 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_3_Pin */
  GPIO_InitStruct.Pin = S3_3_Pin;
 8000ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S3_3_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	4819      	ldr	r0, [pc, #100]	; (8000b44 <MX_GPIO_Init+0x150>)
 8000ade:	f000 fe25 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_1_Pin S3_2_Pin S3_4_Pin */
  GPIO_InitStruct.Pin = S3_1_Pin|S3_2_Pin|S3_4_Pin;
 8000ae2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x148>)
 8000af8:	f000 fe18 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_1_Pin */
  GPIO_InitStruct.Pin = S2_1_Pin;
 8000afc:	2304      	movs	r3, #4
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S2_1_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_GPIO_Init+0x154>)
 8000b10:	f000 fe0c 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_2_Pin S2_4_Pin S1_4_Pin S2_3_Pin
                           S1_3_Pin S1_2_Pin S1_1_Pin */
  GPIO_InitStruct.Pin = S2_2_Pin|S2_4_Pin|S1_4_Pin|S2_3_Pin
 8000b14:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000b18:	613b      	str	r3, [r7, #16]
                          |S1_3_Pin|S1_2_Pin|S1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000b2a:	f000 fdff 	bl	800172c <HAL_GPIO_Init>

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40011400 	.word	0x40011400

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a33      	ldr	r2, [pc, #204]	; (8000ca4 <HAL_ADC_MspInit+0xe8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d122      	bne.n	8000c22 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bdc:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC_B1_Pin|ADC_A1_Pin|ADC_A2_Pin|ADC_B2_Pin;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4824      	ldr	r0, [pc, #144]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c1c:	f000 fd86 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c20:	e03c      	b.n	8000c9c <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <HAL_ADC_MspInit+0xf4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d137      	bne.n	8000c9c <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_ADC_MspInit+0xec>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_B3_Pin|ADC_A3_Pin;
 8000c74:	2330      	movs	r3, #48	; 0x30
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_ADC_MspInit+0xf8>)
 8000c84:	f000 fd52 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_B4_Pin|ADC_A4_Pin;
 8000c88:	2330      	movs	r3, #48	; 0x30
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_ADC_MspInit+0xf0>)
 8000c98:	f000 fd48 	bl	800172c <HAL_GPIO_Init>
}
 8000c9c:	bf00      	nop
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40012400 	.word	0x40012400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40012800 	.word	0x40012800
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <HAL_TIM_Base_MspInit+0xbc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d125      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a26      	ldr	r2, [pc, #152]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4817      	ldr	r0, [pc, #92]	; (8000d7c <HAL_TIM_Base_MspInit+0xc4>)
 8000d1e:	f000 fd05 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d22:	e022      	b.n	8000d6a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2c:	d10c      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a11      	ldr	r2, [pc, #68]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
}
 8000d46:	e010      	b.n	8000d6a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_TIM_Base_MspInit+0xc8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_TIM_Base_MspInit+0xc0>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	40000400 	.word	0x40000400

08000d84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a3a      	ldr	r2, [pc, #232]	; (8000e88 <HAL_TIM_MspPostInit+0x104>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d119      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b39      	ldr	r3, [pc, #228]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482f      	ldr	r0, [pc, #188]	; (8000e90 <HAL_TIM_MspPostInit+0x10c>)
 8000dd2:	f000 fcab 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dd6:	e052      	b.n	8000e7e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d118      	bne.n	8000e14 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM_B1_Pin|PWM_A2_Pin|PWM_B2_Pin;
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <HAL_TIM_MspPostInit+0x110>)
 8000e0e:	f000 fc8d 	bl	800172c <HAL_GPIO_Init>
}
 8000e12:	e034      	b.n	8000e7e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_TIM_MspPostInit+0x114>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12f      	bne.n	8000e7e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_TIM_MspPostInit+0x108>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_A3_Pin|PWM_B3_Pin;
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <HAL_TIM_MspPostInit+0x110>)
 8000e62:	f000 fc63 	bl	800172c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_B4_Pin|PWM_A4_Pin;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_TIM_MspPostInit+0x10c>)
 8000e7a:	f000 fc57 	bl	800172c <HAL_GPIO_Init>
}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	40010800 	.word	0x40010800
 8000e98:	40000400 	.word	0x40000400

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_UART_MspInit+0x8c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d131      	bne.n	8000f20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_UART_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HAL_UART_MspInit+0x94>)
 8000f02:	f000 fc13 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0x94>)
 8000f1c:	f000 fc06 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7a:	f000 f87f 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f8a:	f000 fecc 	bl	8001d26 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200011cc 	.word	0x200011cc

08000f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb0:	480a      	ldr	r0, [pc, #40]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff ffe5 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f007 fef1 	bl	8008db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff f9cf 	bl	8000374 <main>
  bx lr
 8000fd6:	4770      	bx	lr
  ldr r3, =_sidata
 8000fd8:	08008e9c 	.word	0x08008e9c
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe0:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000fe4:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000fe8:	200014b8 	.word	0x200014b8

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 fb51 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fda4 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fb69 	bl	8001712 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f000 fb31 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000008 	.word	0x20000008
 800109c:	20000534 	.word	0x20000534

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000534 	.word	0x20000534

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0be      	b.n	800129c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fd3e 	bl	8000bbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f9ab 	bl	800149c <ADC_ConversionStop_Disable>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 8099 	bne.w	800128a <HAL_ADC_Init+0x18e>
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 8095 	bne.w	800128a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	f043 0202 	orr.w	r2, r3, #2
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800117c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b1b      	ldrb	r3, [r3, #12]
 8001182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001194:	d003      	beq.n	800119e <HAL_ADC_Init+0xa2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d102      	bne.n	80011a4 <HAL_ADC_Init+0xa8>
 800119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_Init+0xaa>
 80011a4:	2300      	movs	r3, #0
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d119      	bne.n	80011e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	035a      	lsls	r2, r3, #13
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e00b      	b.n	80011e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_ADC_Init+0x1a8>)
 8001204:	4013      	ands	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	430b      	orrs	r3, r1
 800120e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001218:	d003      	beq.n	8001222 <HAL_ADC_Init+0x126>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d104      	bne.n	800122c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	3b01      	subs	r3, #1
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_ADC_Init+0x1ac>)
 8001248:	4013      	ands	r3, r2
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	429a      	cmp	r2, r3
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001266:	e018      	b.n	800129a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f023 0312 	bic.w	r3, r3, #18
 8001270:	f043 0210 	orr.w	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001288:	e007      	b.n	800129a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800129a:	7dfb      	ldrb	r3, [r7, #23]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	ffe1f7fd 	.word	0xffe1f7fd
 80012a8:	ff1f0efe 	.word	0xff1f0efe

080012ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x20>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0dc      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1da>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d81c      	bhi.n	8001316 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b05      	subs	r3, #5
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4019      	ands	r1, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b05      	subs	r3, #5
 8001308:	fa00 f203 	lsl.w	r2, r0, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
 8001314:	e03c      	b.n	8001390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d81c      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b23      	subs	r3, #35	; 0x23
 8001330:	221f      	movs	r2, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	4019      	ands	r1, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b23      	subs	r3, #35	; 0x23
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
 8001356:	e01b      	b.n	8001390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b41      	subs	r3, #65	; 0x41
 800136a:	221f      	movs	r2, #31
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b41      	subs	r3, #65	; 0x41
 8001384:	fa00 f203 	lsl.w	r2, r0, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b09      	cmp	r3, #9
 8001396:	d91c      	bls.n	80013d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b1e      	subs	r3, #30
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	e019      	b.n	8001406 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6919      	ldr	r1, [r3, #16]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4019      	ands	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d003      	beq.n	8001416 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001412:	2b11      	cmp	r3, #17
 8001414:	d132      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_ADC_ConfigChannel+0x1e4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d125      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d126      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800143c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d11a      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_ADC_ConfigChannel+0x1e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_ADC_ConfigChannel+0x1ec>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9a      	lsrs	r2, r3, #18
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800145c:	e002      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3b01      	subs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f9      	bne.n	800145e <HAL_ADC_ConfigChannel+0x1b2>
 800146a:	e007      	b.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40012400 	.word	0x40012400
 8001494:	20000000 	.word	0x20000000
 8001498:	431bde83 	.word	0x431bde83

0800149c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d127      	bne.n	8001506 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c6:	f7ff fdeb 	bl	80010a0 <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014cc:	e014      	b.n	80014f8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ce:	f7ff fde7 	bl	80010a0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d90d      	bls.n	80014f8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	f043 0210 	orr.w	r2, r3, #16
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e007      	b.n	8001508 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d0e3      	beq.n	80014ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <__NVIC_EnableIRQ+0x34>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001688:	f7ff ff90 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff2d 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff42 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff90 	bl	8001600 <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5f 	bl	80015ac <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff35 	bl	8001574 <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e169      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8158 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a9a      	ldr	r2, [pc, #616]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001768:	4a98      	ldr	r2, [pc, #608]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d875      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800176e:	4a98      	ldr	r2, [pc, #608]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d058      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001774:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d86f      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800177a:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d052      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001780:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d869      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001786:	4a94      	ldr	r2, [pc, #592]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04c      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 800178c:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d863      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001792:	4a92      	ldr	r2, [pc, #584]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d046      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001798:	4a90      	ldr	r2, [pc, #576]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d85d      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d82a      	bhi.n	80017f8 <HAL_GPIO_Init+0xcc>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d859      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_GPIO_Init+0x80>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001813 	.word	0x08001813
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800185b 	.word	0x0800185b
 80017c0:	0800185b 	.word	0x0800185b
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	0800185b 	.word	0x0800185b
 80017cc:	0800185b 	.word	0x0800185b
 80017d0:	0800185b 	.word	0x0800185b
 80017d4:	0800185b 	.word	0x0800185b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	0800185b 	.word	0x0800185b
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800185b 	.word	0x0800185b
 80017f0:	08001809 	.word	0x08001809
 80017f4:	0800181d 	.word	0x0800181d
 80017f8:	4a79      	ldr	r2, [pc, #484]	; (80019e0 <HAL_GPIO_Init+0x2b4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e02c      	b.n	800185a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e029      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e024      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e01f      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	330c      	adds	r3, #12
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e01a      	b.n	800185c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e013      	b.n	800185c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	611a      	str	r2, [r3, #16]
          break;
 8001846:	e009      	b.n	800185c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	615a      	str	r2, [r3, #20]
          break;
 8001852:	e003      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x130>
          break;
 800185a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d801      	bhi.n	8001866 <HAL_GPIO_Init+0x13a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <HAL_GPIO_Init+0x13e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d802      	bhi.n	8001878 <HAL_GPIO_Init+0x14c>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x152>
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3b08      	subs	r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	210f      	movs	r1, #15
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80b1 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e0>
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 800190c:	2304      	movs	r3, #4
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001918:	2300      	movs	r3, #0
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192a:	492f      	ldr	r1, [pc, #188]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001952:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4928      	ldr	r1, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4918      	ldr	r1, [pc, #96]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x2e2>
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae8e 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	372c      	adds	r7, #44	; 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e001      	b.n	8001a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	807b      	strh	r3, [r7, #2]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a72:	787b      	ldrb	r3, [r7, #1]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a7e:	e003      	b.n	8001a88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	611a      	str	r2, [r3, #16]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa4:	887a      	ldrh	r2, [r7, #2]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	041a      	lsls	r2, r3, #16
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b08b      	sub	sp, #44	; 0x2c
 8001ac8:	af06      	add	r7, sp, #24
 8001aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0fd      	b.n	8001cd2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f006 feb8 	bl	8008860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2203      	movs	r2, #3
 8001af4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f90f 	bl	8004d20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	687e      	ldr	r6, [r7, #4]
 8001b0a:	466d      	mov	r5, sp
 8001b0c:	f106 0410 	add.w	r4, r6, #16
 8001b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	602b      	str	r3, [r5, #0]
 8001b18:	1d33      	adds	r3, r6, #4
 8001b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f003 f8d9 	bl	8004cd4 <USB_CoreInit>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0ce      	b.n	8001cd2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 f90a 	bl	8004d54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e04c      	b.n	8001be0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3301      	adds	r3, #1
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	b298      	uxth	r0, r3
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3336      	adds	r3, #54	; 0x36
 8001b84:	4602      	mov	r2, r0
 8001b86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3303      	adds	r3, #3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	3338      	adds	r3, #56	; 0x38
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	333c      	adds	r3, #60	; 0x3c
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3340      	adds	r3, #64	; 0x40
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3ad      	bcc.n	8001b46 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e044      	b.n	8001c7a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	3301      	adds	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3b5      	bcc.n	8001bf0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	687e      	ldr	r6, [r7, #4]
 8001c8c:	466d      	mov	r5, sp
 8001c8e:	f106 0410 	add.w	r4, r6, #16
 8001c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	602b      	str	r3, [r5, #0]
 8001c9a:	1d33      	adds	r3, r6, #4
 8001c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f003 f864 	bl	8004d6c <USB_DevInit>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00d      	b.n	8001cd2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fffe 	bl	8006ccc <USB_DevDisconnect>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cda <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_PCD_Start+0x16>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e016      	b.n	8001d1e <HAL_PCD_Start+0x44>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fff9 	bl	8004cf4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d02:	2101      	movs	r1, #1
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f007 f81e 	bl	8008d46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 ffd2 	bl	8006cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b088      	sub	sp, #32
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 ffd4 	bl	8006ce0 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d42:	d102      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb61 	bl	800240c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 ffc6 	bl	8006ce0 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d112      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f006 fdec 	bl	8008956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f925 	bl	8001fd0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 ffa8 	bl	8006ce0 <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 ff91 	bl	8006ce0 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc8:	d10b      	bne.n	8001de2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 ff7a 	bl	8006ce0 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df6:	d126      	bne.n	8001e46 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0208 	bic.w	r2, r2, #8
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f006 fdcd 	bl	80089c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 ff48 	bl	8006ce0 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e5a:	f040 8084 	bne.w	8001f66 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	77fb      	strb	r3, [r7, #31]
 8001e62:	e011      	b.n	8001e88 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	441a      	add	r2, r3
 8001e70:	7ffb      	ldrb	r3, [r7, #31]
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	b292      	uxth	r2, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	f107 0120 	add.w	r1, r7, #32
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e82:	7ffb      	ldrb	r3, [r7, #31]
 8001e84:	3301      	adds	r3, #1
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	7ffb      	ldrb	r3, [r7, #31]
 8001e8a:	2b07      	cmp	r3, #7
 8001e8c:	d9ea      	bls.n	8001e64 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	b292      	uxth	r2, r2
 8001eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ebe:	bf00      	nop
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f6      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	77fb      	strb	r3, [r7, #31]
 8001eee:	e010      	b.n	8001f12 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	7ffa      	ldrb	r2, [r7, #31]
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	440a      	add	r2, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	f107 0120 	add.w	r1, r7, #32
 8001f04:	440b      	add	r3, r1
 8001f06:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f0a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	77fb      	strb	r3, [r7, #31]
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d9eb      	bls.n	8001ef0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f42:	b292      	uxth	r2, r2
 8001f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0204 	orr.w	r2, r2, #4
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f006 fd17 	bl	8008994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 feb8 	bl	8006ce0 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7a:	d10e      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f006 fcd0 	bl	800893a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fe9e 	bl	8006ce0 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fae:	d10b      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_SetAddress+0x1a>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e013      	b.n	8002012 <HAL_PCD_SetAddress+0x42>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fe45 	bl	8006c92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	4608      	mov	r0, r1
 8002024:	4611      	mov	r1, r2
 8002026:	461a      	mov	r2, r3
 8002028:	4603      	mov	r3, r0
 800202a:	70fb      	strb	r3, [r7, #3]
 800202c:	460b      	mov	r3, r1
 800202e:	803b      	strh	r3, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0e      	bge.n	800205e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	705a      	strb	r2, [r3, #1]
 800205c:	e00e      	b.n	800207c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	f003 0207 	and.w	r2, r3, #7
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002088:	883a      	ldrh	r2, [r7, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	78ba      	ldrb	r2, [r7, #2]
 8002092:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d102      	bne.n	80020b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_PCD_EP_Open+0xa6>
 80020bc:	2302      	movs	r3, #2
 80020be:	e00e      	b.n	80020de <HAL_PCD_EP_Open+0xc4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fe6c 	bl	8004dac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0e      	bge.n	8002118 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	705a      	strb	r2, [r3, #1]
 8002116:	e00e      	b.n	8002136 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	b2da      	uxtb	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_PCD_EP_Close+0x6a>
 800214c:	2302      	movs	r3, #2
 800214e:	e00e      	b.n	800216e <HAL_PCD_EP_Close+0x88>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 f98e 	bl	8005480 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	460b      	mov	r3, r1
 8002184:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	f003 0207 	and.w	r2, r3, #7
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6979      	ldr	r1, [r7, #20]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 fb40 	bl	8005858 <USB_EPStartXfer>
 80021d8:	e005      	b.n	80021e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fb39 	bl	8005858 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	460b      	mov	r3, r1
 800222c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2201      	movs	r2, #1
 8002268:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	b2da      	uxtb	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6979      	ldr	r1, [r7, #20]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fae6 	bl	8005858 <USB_EPStartXfer>
 800228c:	e005      	b.n	800229a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6979      	ldr	r1, [r7, #20]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fadf 	bl	8005858 <USB_EPStartXfer>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	f003 0207 	and.w	r2, r3, #7
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d901      	bls.n	80022c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e04c      	b.n	800235c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da0e      	bge.n	80022e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	705a      	strb	r2, [r3, #1]
 80022e6:	e00c      	b.n	8002302 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_PCD_EP_SetStall+0x7e>
 800231e:	2302      	movs	r3, #2
 8002320:	e01c      	b.n	800235c <HAL_PCD_EP_SetStall+0xb8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68f9      	ldr	r1, [r7, #12]
 8002330:	4618      	mov	r0, r3
 8002332:	f004 fbb1 	bl	8006a98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	2b00      	cmp	r3, #0
 800233e:	d108      	bne.n	8002352 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f004 fcd6 	bl	8006cfe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d901      	bls.n	8002382 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e040      	b.n	8002404 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da0e      	bge.n	80023a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	705a      	strb	r2, [r3, #1]
 80023a6:	e00e      	b.n	80023c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_EP_ClrStall+0x82>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e00e      	b.n	8002404 <HAL_PCD_EP_ClrStall+0xa0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fb9f 	bl	8006b38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002414:	e2df      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002420:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800242c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8158 	bne.w	80026e6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d152      	bne.n	80024e6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3328      	adds	r3, #40	; 0x28
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	3302      	adds	r3, #2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	441a      	add	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024a4:	2100      	movs	r1, #0
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f006 fa2d 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 828e 	beq.w	80029d6 <PCD_EP_ISR_Handler+0x5ca>
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8289 	bne.w	80029d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b292      	uxth	r2, r2
 80024d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024e4:	e277      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d034      	beq.n	800256a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	3306      	adds	r3, #6
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800253e:	b29b      	uxth	r3, r3
 8002540:	f004 fc2d 	bl	8006d9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29a      	uxth	r2, r3
 800254c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002550:	4013      	ands	r3, r2
 8002552:	823b      	strh	r3, [r7, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	8a3a      	ldrh	r2, [r7, #16]
 800255a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800255e:	b292      	uxth	r2, r2
 8002560:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f006 f9a2 	bl	80088ac <HAL_PCD_SetupStageCallback>
 8002568:	e235      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800256a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800256e:	2b00      	cmp	r3, #0
 8002570:	f280 8231 	bge.w	80029d6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29a      	uxth	r2, r3
 800257c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002580:	4013      	ands	r3, r2
 8002582:	83bb      	strh	r3, [r7, #28]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	8bba      	ldrh	r2, [r7, #28]
 800258a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258e:	b292      	uxth	r2, r2
 8002590:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	3306      	adds	r3, #6
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d019      	beq.n	80025fa <PCD_EP_ISR_Handler+0x1ee>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	6959      	ldr	r1, [r3, #20]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f004 fbdd 	bl	8006d9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	441a      	add	r2, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f006 f96b 	bl	80088d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d112      	bne.n	8002648 <PCD_EP_ISR_Handler+0x23c>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800262c:	b29a      	uxth	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e02f      	b.n	80026a8 <PCD_EP_ISR_Handler+0x29c>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b3e      	cmp	r3, #62	; 0x3e
 800264e:	d813      	bhi.n	8002678 <PCD_EP_ISR_Handler+0x26c>
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <PCD_EP_ISR_Handler+0x25e>
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	3301      	adds	r3, #1
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	b29b      	uxth	r3, r3
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	b29a      	uxth	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e017      	b.n	80026a8 <PCD_EP_ISR_Handler+0x29c>
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <PCD_EP_ISR_Handler+0x286>
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3b01      	subs	r3, #1
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	b29b      	uxth	r3, r3
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	b29b      	uxth	r3, r3
 800269a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800269e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	827b      	strh	r3, [r7, #18]
 80026ba:	8a7b      	ldrh	r3, [r7, #18]
 80026bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026c0:	827b      	strh	r3, [r7, #18]
 80026c2:	8a7b      	ldrh	r3, [r7, #18]
 80026c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026c8:	827b      	strh	r3, [r7, #18]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	8a7b      	ldrh	r3, [r7, #18]
 80026d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	8013      	strh	r3, [r2, #0]
 80026e4:	e177      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f280 80ea 	bge.w	80028d6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002718:	4013      	ands	r3, r2
 800271a:	853b      	strh	r3, [r7, #40]	; 0x28
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800272c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002730:	b292      	uxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002734:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d122      	bne.n	8002798 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	3306      	adds	r3, #6
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800277c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8087 	beq.w	8002892 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	88da      	ldrh	r2, [r3, #6]
 8002790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002792:	f004 fb04 	bl	8006d9e <USB_ReadPMA>
 8002796:	e07c      	b.n	8002892 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	78db      	ldrb	r3, [r3, #3]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d108      	bne.n	80027b2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a2:	461a      	mov	r2, r3
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f923 	bl	80029f2 <HAL_PCD_EP_DB_Receive>
 80027ac:	4603      	mov	r3, r0
 80027ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b0:	e06f      	b.n	8002892 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d021      	beq.n	8002850 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	3302      	adds	r3, #2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002834:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02a      	beq.n	8002892 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	6959      	ldr	r1, [r3, #20]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284a:	f004 faa8 	bl	8006d9e <USB_ReadPMA>
 800284e:	e020      	b.n	8002892 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	3306      	adds	r3, #6
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002878:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	895a      	ldrh	r2, [r3, #10]
 800288c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288e:	f004 fa86 	bl	8006d9e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002898:	441a      	add	r2, r3
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a4:	441a      	add	r2, r3
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <PCD_EP_ISR_Handler+0x4b0>
 80028b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d206      	bcs.n	80028ca <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f006 f804 	bl	80088d0 <HAL_PCD_DataOutStageCallback>
 80028c8:	e005      	b.n	80028d6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 ffc1 	bl	8005858 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d07a      	beq.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80028e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	843b      	strh	r3, [r7, #32]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8c3b      	ldrh	r3, [r7, #32]
 8002920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002928:	b29b      	uxth	r3, r3
 800292a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d108      	bne.n	8002946 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002938:	2b02      	cmp	r3, #2
 800293a:	d146      	bne.n	80029ca <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800293c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d141      	bne.n	80029ca <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	3302      	adds	r3, #2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800296e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	8bfb      	ldrh	r3, [r7, #30]
 8002976:	429a      	cmp	r2, r3
 8002978:	d906      	bls.n	8002988 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	8bfb      	ldrh	r3, [r7, #30]
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	e002      	b.n	800298e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f005 ffb2 	bl	8008906 <HAL_PCD_DataInStageCallback>
 80029a2:	e018      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	8bfb      	ldrh	r3, [r7, #30]
 80029aa:	441a      	add	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	8bfb      	ldrh	r3, [r7, #30]
 80029b6:	441a      	add	r2, r3
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 ff48 	bl	8005858 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029c8:	e005      	b.n	80029d6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029cc:	461a      	mov	r2, r3
 80029ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f91b 	bl	8002c0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f6ff ad17 	blt.w	8002416 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3738      	adds	r7, #56	; 0x38
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b088      	sub	sp, #32
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07e      	beq.n	8002b08 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3302      	adds	r3, #2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	8b7b      	ldrh	r3, [r7, #26]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d306      	bcc.n	8002a4c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	8b7b      	ldrh	r3, [r7, #26]
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	619a      	str	r2, [r3, #24]
 8002a4a:	e002      	b.n	8002a52 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d123      	bne.n	8002aa2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a74:	833b      	strh	r3, [r7, #24]
 8002a76:	8b3b      	ldrh	r3, [r7, #24]
 8002a78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a7c:	833b      	strh	r3, [r7, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	8b3b      	ldrh	r3, [r7, #24]
 8002a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01f      	beq.n	8002aec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	82fb      	strh	r3, [r7, #22]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aec:	8b7b      	ldrh	r3, [r7, #26]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6959      	ldr	r1, [r3, #20]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	891a      	ldrh	r2, [r3, #8]
 8002b00:	8b7b      	ldrh	r3, [r7, #26]
 8002b02:	f004 f94c 	bl	8006d9e <USB_ReadPMA>
 8002b06:	e07c      	b.n	8002c02 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3306      	adds	r3, #6
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	8b7b      	ldrh	r3, [r7, #26]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d306      	bcc.n	8002b4a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	619a      	str	r2, [r3, #24]
 8002b48:	e002      	b.n	8002b50 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d123      	bne.n	8002ba0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	83fb      	strh	r3, [r7, #30]
 8002b74:	8bfb      	ldrh	r3, [r7, #30]
 8002b76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b7a:	83fb      	strh	r3, [r7, #30]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	8bfb      	ldrh	r3, [r7, #30]
 8002b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11f      	bne.n	8002bea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	83bb      	strh	r3, [r7, #28]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	8bbb      	ldrh	r3, [r7, #28]
 8002bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	6959      	ldr	r1, [r3, #20]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	895a      	ldrh	r2, [r3, #10]
 8002bfc:	8b7b      	ldrh	r3, [r7, #26]
 8002bfe:	f004 f8ce 	bl	8006d9e <USB_ReadPMA>
    }
  }

  return count;
 8002c02:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b094      	sub	sp, #80	; 0x50
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8138 	beq.w	8002e96 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d907      	bls.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c66:	1ad2      	subs	r2, r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	619a      	str	r2, [r3, #24]
 8002c6c:	e002      	b.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12c      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f005 fe3f 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 823a 	beq.w	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	82fb      	strh	r3, [r7, #22]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	441a      	add	r2, r3
 8002cbe:	8afb      	ldrh	r3, [r7, #22]
 8002cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	8013      	strh	r3, [r2, #0]
 8002cd4:	e218      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	f040 81ee 	bne.w	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d34:	441a      	add	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d42:	441a      	add	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d309      	bcc.n	8002d68 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6a1a      	ldr	r2, [r3, #32]
 8002d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d60:	1ad2      	subs	r2, r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	621a      	str	r2, [r3, #32]
 8002d66:	e015      	b.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002d70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d7e:	e009      	b.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d155      	bne.n	8002e48 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	011a      	lsls	r2, r3, #4
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d112      	bne.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	e047      	b.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df2:	2b3e      	cmp	r3, #62	; 0x3e
 8002df4:	d811      	bhi.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x20e>
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x200>
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	3301      	adds	r3, #1
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e032      	b.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x224>
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	e01b      	b.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	785b      	ldrb	r3, [r3, #1]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d117      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	4413      	add	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	011a      	lsls	r2, r3, #4
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	4413      	add	r3, r2
 8002e72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6959      	ldr	r1, [r3, #20]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	891a      	ldrh	r2, [r3, #8]
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f003 ff40 	bl	8006d14 <USB_WritePMA>
 8002e94:	e138      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3306      	adds	r3, #6
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d307      	bcc.n	8002ede <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ed6:	1ad2      	subs	r2, r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	e002      	b.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d12e      	bne.n	8002f4a <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f005 fd07 	bl	8008906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 8102 	bne.w	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	441a      	add	r2, r3
 8002f30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	8013      	strh	r3, [r2, #0]
 8002f48:	e0de      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11f      	bne.n	8002f94 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 80b4 	bne.w	8003108 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fa8:	441a      	add	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d309      	bcc.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd4:	1ad2      	subs	r2, r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	621a      	str	r2, [r3, #32]
 8002fda:	e015      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002fe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ff2:	e009      	b.n	8003008 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	643b      	str	r3, [r7, #64]	; 0x40
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d155      	bne.n	80030c2 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003024:	b29b      	uxth	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	4413      	add	r3, r2
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	011a      	lsls	r2, r3, #4
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	4413      	add	r3, r2
 8003038:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
 800303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	d112      	bne.n	800306a <HAL_PCD_EP_DB_Transmit+0x45e>
 8003044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800304e:	b29a      	uxth	r2, r3
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	801a      	strh	r2, [r3, #0]
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800305e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003062:	b29a      	uxth	r2, r3
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	e044      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800306a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306c:	2b3e      	cmp	r3, #62	; 0x3e
 800306e:	d811      	bhi.n	8003094 <HAL_PCD_EP_DB_Transmit+0x488>
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	3301      	adds	r3, #1
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	b29b      	uxth	r3, r3
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	b29a      	uxth	r2, r3
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	801a      	strh	r2, [r3, #0]
 8003092:	e02f      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0x49e>
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	3b01      	subs	r3, #1
 80030a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	029b      	lsls	r3, r3, #10
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e018      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d114      	bne.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d8:	4413      	add	r3, r2
 80030da:	643b      	str	r3, [r7, #64]	; 0x40
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	011a      	lsls	r2, r3, #4
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	4413      	add	r3, r2
 80030e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6959      	ldr	r1, [r3, #20]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	895a      	ldrh	r2, [r3, #10]
 8003100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003102:	b29b      	uxth	r3, r3
 8003104:	f003 fe06 	bl	8006d14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003122:	82bb      	strh	r3, [r7, #20]
 8003124:	8abb      	ldrh	r3, [r7, #20]
 8003126:	f083 0310 	eor.w	r3, r3, #16
 800312a:	82bb      	strh	r3, [r7, #20]
 800312c:	8abb      	ldrh	r3, [r7, #20]
 800312e:	f083 0320 	eor.w	r3, r3, #32
 8003132:	82bb      	strh	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	8abb      	ldrh	r3, [r7, #20]
 8003144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800314c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003154:	b29b      	uxth	r3, r3
 8003156:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3750      	adds	r7, #80	; 0x50
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003162:	b480      	push	{r7}
 8003164:	b087      	sub	sp, #28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	817b      	strh	r3, [r7, #10]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003174:	897b      	ldrh	r3, [r7, #10]
 8003176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e009      	b.n	80031ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003198:	897a      	ldrh	r2, [r7, #10]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031ac:	893b      	ldrh	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	80da      	strh	r2, [r3, #6]
 80031c0:	e00b      	b.n	80031da <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2201      	movs	r2, #1
 80031c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e26c      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b04      	cmp	r3, #4
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003214:	4b8f      	ldr	r3, [pc, #572]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
 8003220:	4b8c      	ldr	r3, [pc, #560]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06c      	beq.n	8003314 <HAL_RCC_OscConfig+0x12c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d168      	bne.n	8003314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e246      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x76>
 8003250:	4b80      	ldr	r3, [pc, #512]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7f      	ldr	r2, [pc, #508]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e02e      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b78      	ldr	r3, [pc, #480]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a77      	ldr	r2, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e01d      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0xbc>
 800328a:	4b72      	ldr	r3, [pc, #456]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a71      	ldr	r2, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0xd4>
 80032a4:	4b6b      	ldr	r3, [pc, #428]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6a      	ldr	r2, [pc, #424]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd feec 	bl	80010a0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fd fee8 	bl	80010a0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1fa      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0xe4>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fed8 	bl	80010a0 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fed4 	bl	80010a0 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1e6      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x10c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
 800333a:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1ba      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4939      	ldr	r1, [pc, #228]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_OscConfig+0x270>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fe8d 	bl	80010a0 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fd fe89 	bl	80010a0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e19b      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4927      	ldr	r1, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x270>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fe6c 	bl	80010a0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fd fe68 	bl	80010a0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e17a      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03a      	beq.n	800346c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7fd fe4c 	bl	80010a0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7fd fe48 	bl	80010a0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e15a      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_RCC_OscConfig+0x26c>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f000 fada 	bl	80039e4 <RCC_Delay>
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_RCC_OscConfig+0x274>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fd fe32 	bl	80010a0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fd fe2e 	bl	80010a0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d908      	bls.n	8003460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e140      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	4b9e      	ldr	r3, [pc, #632]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e9      	bne.n	8003440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a6 	beq.w	80035c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347e:	4b97      	ldr	r3, [pc, #604]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b94      	ldr	r3, [pc, #592]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a93      	ldr	r2, [pc, #588]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]
 8003496:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fd fdef 	bl	80010a0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fd fdeb 	bl	80010a0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	; 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0fd      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b81      	ldr	r3, [pc, #516]	; (80036e0 <HAL_RCC_OscConfig+0x4f8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x312>
 80034ec:	4b7b      	ldr	r3, [pc, #492]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a7a      	ldr	r2, [pc, #488]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	e02d      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x334>
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a75      	ldr	r2, [pc, #468]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b73      	ldr	r3, [pc, #460]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a72      	ldr	r2, [pc, #456]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	e01c      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d10c      	bne.n	800353e <HAL_RCC_OscConfig+0x356>
 8003524:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a6c      	ldr	r2, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	e00b      	b.n	8003556 <HAL_RCC_OscConfig+0x36e>
 800353e:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a66      	ldr	r2, [pc, #408]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b64      	ldr	r3, [pc, #400]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a63      	ldr	r2, [pc, #396]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355e:	f7fd fd9f 	bl	80010a0 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	e00a      	b.n	800357c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fd fd9b 	bl	80010a0 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0ab      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357c:	4b57      	ldr	r3, [pc, #348]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ee      	beq.n	8003566 <HAL_RCC_OscConfig+0x37e>
 8003588:	e014      	b.n	80035b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fd fd89 	bl	80010a0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd fd85 	bl	80010a0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e095      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b48      	ldr	r3, [pc, #288]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a47      	ldr	r2, [pc, #284]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8081 	beq.w	80036d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	4b42      	ldr	r3, [pc, #264]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d061      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d146      	bne.n	8003672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fd fd59 	bl	80010a0 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fd fd55 	bl	80010a0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e067      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d108      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	492d      	ldr	r1, [pc, #180]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a19      	ldr	r1, [r3, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	430b      	orrs	r3, r1
 800363e:	4927      	ldr	r1, [pc, #156]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fd fd29 	bl	80010a0 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fd fd25 	bl	80010a0 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e037      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x46a>
 8003670:	e02f      	b.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b1c      	ldr	r3, [pc, #112]	; (80036e4 <HAL_RCC_OscConfig+0x4fc>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fd fd12 	bl	80010a0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd fd0e 	bl	80010a0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e020      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x498>
 800369e:	e018      	b.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e013      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42420060 	.word	0x42420060

080036e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0d0      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4965      	ldr	r1, [pc, #404]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800374e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a52      	ldr	r2, [pc, #328]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d040      	beq.n	8003808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e073      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06b      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4936      	ldr	r1, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fd fc62 	bl	80010a0 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fd fc5e 	bl	80010a0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e053      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d210      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4922      	ldr	r1, [pc, #136]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f821 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fbc0 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08008e7c 	.word	0x08008e7c
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b490      	push	{r4, r7}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c4:	1d3c      	adds	r4, r7, #4
 80038c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038cc:	f240 2301 	movw	r3, #513	; 0x201
 80038d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x40>
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d003      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x46>
 80038fa:	e02d      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fe:	623b      	str	r3, [r7, #32]
      break;
 8003900:	e02d      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	0c9b      	lsrs	r3, r3, #18
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800390e:	4413      	add	r3, r2
 8003910:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003914:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	0c5b      	lsrs	r3, r3, #17
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	4413      	add	r3, r2
 8003930:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003934:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_RCC_GetSysClockFreq+0xb8>)
 800393a:	fb02 f203 	mul.w	r2, r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e004      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <HAL_RCC_GetSysClockFreq+0xbc>)
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	623b      	str	r3, [r7, #32]
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_RCC_GetSysClockFreq+0xc0>)
 800395a:	623b      	str	r3, [r7, #32]
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	6a3b      	ldr	r3, [r7, #32]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	; 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc90      	pop	{r4, r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	08008e24 	.word	0x08008e24
 8003970:	40021000 	.word	0x40021000
 8003974:	00f42400 	.word	0x00f42400
 8003978:	003d0900 	.word	0x003d0900
 800397c:	007a1200 	.word	0x007a1200

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <HAL_RCC_GetHCLKFreq+0x10>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	20000000 	.word	0x20000000

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003998:	f7ff fff2 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08008e8c 	.word	0x08008e8c

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffde 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0adb      	lsrs	r3, r3, #11
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08008e8c 	.word	0x08008e8c

080039e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCC_Delay+0x34>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <RCC_Delay+0x38>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a00:	bf00      	nop
  }
  while (Delay --);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	60fa      	str	r2, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f9      	bne.n	8003a00 <RCC_Delay+0x1c>
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d07d      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	61d3      	str	r3, [r2, #28]
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a74:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a80:	f7fd fb0e 	bl	80010a0 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	e008      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a88:	f7fd fb0a 	bl	80010a0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e06d      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aa6:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d027      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	4b2e      	ldr	r3, [pc, #184]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d014      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd fad9 	bl	80010a0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fd fad5 	bl	80010a0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e036      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ee      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4917      	ldr	r1, [pc, #92]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	490b      	ldr	r1, [pc, #44]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
 8003b88:	42420440 	.word	0x42420440

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd f880 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fb96 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e041      	b.n	8003cc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f839 	bl	8003cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fb47 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e022      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e015      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e05e      	b.n	8003e0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x82>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x92>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fe41 	bl	8004a16 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_TIM_PWM_Start+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_PWM_Start+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d009      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_PWM_Start+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_TIM_PWM_Start+0x140>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b06      	cmp	r3, #6
 8003de6:	d010      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	e007      	b.n	8003e0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800

08003e20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e041      	b.n	8003eb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f839 	bl	8003ebe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f000 fa4c 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_IC_ConfigChannel+0x1a>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e082      	b.n	8003ff0 <HAL_TIM_IC_ConfigChannel+0x120>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f000 fbe2 	bl	80046d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 020c 	bic.w	r2, r2, #12
 8003f1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6999      	ldr	r1, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	619a      	str	r2, [r3, #24]
 8003f2e:	e05a      	b.n	8003fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d11c      	bne.n	8003f70 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f000 fc4b 	bl	80047e0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6999      	ldr	r1, [r3, #24]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	021a      	lsls	r2, r3, #8
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]
 8003f6e:	e03a      	b.n	8003fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d11b      	bne.n	8003fae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f000 fc96 	bl	80048b6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 020c 	bic.w	r2, r2, #12
 8003f98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
 8003fac:	e01b      	b.n	8003fe6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6819      	ldr	r1, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f000 fcb5 	bl	800492c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	021a      	lsls	r2, r3, #8
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800400e:	2302      	movs	r3, #2
 8004010:	e0ac      	b.n	800416c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f200 809f 	bhi.w	8004160 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800405d 	.word	0x0800405d
 800402c:	08004161 	.word	0x08004161
 8004030:	08004161 	.word	0x08004161
 8004034:	08004161 	.word	0x08004161
 8004038:	0800409d 	.word	0x0800409d
 800403c:	08004161 	.word	0x08004161
 8004040:	08004161 	.word	0x08004161
 8004044:	08004161 	.word	0x08004161
 8004048:	080040df 	.word	0x080040df
 800404c:	08004161 	.word	0x08004161
 8004050:	08004161 	.word	0x08004161
 8004054:	08004161 	.word	0x08004161
 8004058:	0800411f 	.word	0x0800411f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9ac 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0208 	orr.w	r2, r2, #8
 8004076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
      break;
 800409a:	e062      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f9f2 	bl	800448c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	619a      	str	r2, [r3, #24]
      break;
 80040dc:	e041      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fa3b 	bl	8004560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69d9      	ldr	r1, [r3, #28]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      break;
 800411c:	e021      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fa85 	bl	8004634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	61da      	str	r2, [r3, #28]
      break;
 800415e:	e000      	b.n	8004162 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIM_ConfigClockSource+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e0b3      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x180>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d03e      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0xd0>
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ca:	f200 8087 	bhi.w	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	f000 8085 	beq.w	80042e0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	d87f      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041dc:	2b70      	cmp	r3, #112	; 0x70
 80041de:	d01a      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0xa2>
 80041e0:	2b70      	cmp	r3, #112	; 0x70
 80041e2:	d87b      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041e4:	2b60      	cmp	r3, #96	; 0x60
 80041e6:	d050      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x116>
 80041e8:	2b60      	cmp	r3, #96	; 0x60
 80041ea:	d877      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041ec:	2b50      	cmp	r3, #80	; 0x50
 80041ee:	d03c      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xf6>
 80041f0:	2b50      	cmp	r3, #80	; 0x50
 80041f2:	d873      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d058      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x136>
 80041f8:	2b40      	cmp	r3, #64	; 0x40
 80041fa:	d86f      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d064      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x156>
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d86b      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d060      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x156>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d867      	bhi.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x156>
 8004210:	2b10      	cmp	r3, #16
 8004212:	d05a      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004214:	e062      	b.n	80042dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f000 fbd7 	bl	80049d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004238:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]
      break;
 8004242:	e04e      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f000 fbc0 	bl	80049d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004266:	609a      	str	r2, [r3, #8]
      break;
 8004268:	e03b      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	461a      	mov	r2, r3
 8004278:	f000 fa84 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2150      	movs	r1, #80	; 0x50
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fb8e 	bl	80049a4 <TIM_ITRx_SetConfig>
      break;
 8004288:	e02b      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f000 fade 	bl	8004858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2160      	movs	r1, #96	; 0x60
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fb7e 	bl	80049a4 <TIM_ITRx_SetConfig>
      break;
 80042a8:	e01b      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fa64 	bl	8004784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fb6e 	bl	80049a4 <TIM_ITRx_SetConfig>
      break;
 80042c8:	e00b      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 fb65 	bl	80049a4 <TIM_ITRx_SetConfig>
        break;
 80042da:	e002      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80042e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10c      	bne.n	8004436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0308 	bic.w	r3, r3, #8
 8004422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00

0800448c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0210 	bic.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <TIM_OC2_SetConfig+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10d      	bne.n	8004508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a14      	ldr	r2, [pc, #80]	; (800455c <TIM_OC2_SetConfig+0xd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d113      	bne.n	8004538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00

08004560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <TIM_OC3_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10d      	bne.n	80045da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <TIM_OC3_SetConfig+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d113      	bne.n	800460a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40012c00 	.word	0x40012c00

08004634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <TIM_OC4_SetConfig+0x98>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d109      	bne.n	80046a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00

080046d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <TIM_TI1_SetConfig+0xa8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_TI1_SetConfig+0x46>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d007      	beq.n	8004716 <TIM_TI1_SetConfig+0x46>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <TIM_TI1_SetConfig+0xac>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_TI1_SetConfig+0x46>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <TIM_TI1_SetConfig+0xb0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <TIM_TI1_SetConfig+0x4a>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <TIM_TI1_SetConfig+0x4c>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e003      	b.n	800473a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	b2db      	uxtb	r3, r3
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 030a 	bic.w	r3, r3, #10
 8004754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f003 030a 	and.w	r3, r3, #10
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800

08004784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f023 030a 	bic.w	r3, r3, #10
 80047c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f023 0210 	bic.w	r2, r3, #16
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	031b      	lsls	r3, r3, #12
 8004824:	b29b      	uxth	r3, r3
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 0210 	bic.w	r2, r3, #16
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	031b      	lsls	r3, r3, #12
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b087      	sub	sp, #28
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004906:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	621a      	str	r2, [r3, #32]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800496a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	031b      	lsls	r3, r3, #12
 8004970:	b29b      	uxth	r3, r3
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	031b      	lsls	r3, r3, #12
 8004984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f043 0307 	orr.w	r3, r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	609a      	str	r2, [r3, #8]
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2201      	movs	r2, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	401a      	ands	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e046      	b.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d009      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10c      	bne.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800

08004b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e03f      	b.n	8004bae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f9aa 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f829 	bl	8004bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bf2:	f023 030c 	bic.w	r3, r3, #12
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <UART_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d103      	bne.n	8004c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe fecc 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	e002      	b.n	8004c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe feb4 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	0119      	lsls	r1, r3, #4
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c66:	fba3 0302 	umull	r0, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2064      	movs	r0, #100	; 0x64
 8004c6e:	fb00 f303 	mul.w	r3, r0, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	; 0x32
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c84:	4419      	add	r1, r3
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2064      	movs	r0, #100	; 0x64
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <UART_SetConfig+0x118>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	51eb851f 	.word	0x51eb851f

08004cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	f107 0014 	add.w	r0, r7, #20
 8004ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	b004      	add	sp, #16
 8004cf2:	4770      	bx	lr

08004cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d04:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr

08004d54 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	f107 0014 	add.w	r0, r7, #20
 8004d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	b004      	add	sp, #16
 8004daa:	4770      	bx	lr

08004dac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b09b      	sub	sp, #108	; 0x6c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	78db      	ldrb	r3, [r3, #3]
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d81f      	bhi.n	8004e1e <USB_ActivateEndpoint+0x72>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <USB_ActivateEndpoint+0x38>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df5 	.word	0x08004df5
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e27 	.word	0x08004e27
 8004df0:	08004e03 	.word	0x08004e03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004df4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e00:	e012      	b.n	8004e28 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e06:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e0e:	e00b      	b.n	8004e28 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e1c:	e004      	b.n	8004e28 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004e24:	e000      	b.n	8004e28 <USB_ActivateEndpoint+0x7c>
      break;
 8004e26:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7b1b      	ldrb	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 8149 	bne.w	800512c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8084 	beq.w	8004fac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	011a      	lsls	r2, r3, #4
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	88db      	ldrh	r3, [r3, #6]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	81fb      	strh	r3, [r7, #14]
 8004ee6:	89fb      	ldrh	r3, [r7, #14]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <USB_ActivateEndpoint+0x17c>
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	81bb      	strh	r3, [r7, #12]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	89bb      	ldrh	r3, [r7, #12]
 8004f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	78db      	ldrb	r3, [r3, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d020      	beq.n	8004f72 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	813b      	strh	r3, [r7, #8]
 8004f48:	893b      	ldrh	r3, [r7, #8]
 8004f4a:	f083 0320 	eor.w	r3, r3, #32
 8004f4e:	813b      	strh	r3, [r7, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	893b      	ldrh	r3, [r7, #8]
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]
 8004f70:	e27f      	b.n	8005472 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	897b      	ldrh	r3, [r7, #10]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
 8004faa:	e262      	b.n	8005472 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	4413      	add	r3, r2
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	011a      	lsls	r2, r3, #4
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	88db      	ldrh	r3, [r3, #6]
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	4413      	add	r3, r2
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	011a      	lsls	r2, r3, #4
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d112      	bne.n	8005032 <USB_ActivateEndpoint+0x286>
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005016:	b29a      	uxth	r2, r3
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502a:	b29a      	uxth	r2, r3
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e02f      	b.n	8005092 <USB_ActivateEndpoint+0x2e6>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b3e      	cmp	r3, #62	; 0x3e
 8005038:	d813      	bhi.n	8005062 <USB_ActivateEndpoint+0x2b6>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	663b      	str	r3, [r7, #96]	; 0x60
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <USB_ActivateEndpoint+0x2a8>
 800504e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005050:	3301      	adds	r3, #1
 8005052:	663b      	str	r3, [r7, #96]	; 0x60
 8005054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005056:	b29b      	uxth	r3, r3
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e017      	b.n	8005092 <USB_ActivateEndpoint+0x2e6>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	663b      	str	r3, [r7, #96]	; 0x60
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <USB_ActivateEndpoint+0x2d0>
 8005076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005078:	3b01      	subs	r3, #1
 800507a:	663b      	str	r3, [r7, #96]	; 0x60
 800507c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	83fb      	strh	r3, [r7, #30]
 80050a0:	8bfb      	ldrh	r3, [r7, #30]
 80050a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01b      	beq.n	80050e2 <USB_ActivateEndpoint+0x336>
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	83bb      	strh	r3, [r7, #28]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	8bbb      	ldrh	r3, [r7, #28]
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f8:	837b      	strh	r3, [r7, #26]
 80050fa:	8b7b      	ldrh	r3, [r7, #26]
 80050fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005100:	837b      	strh	r3, [r7, #26]
 8005102:	8b7b      	ldrh	r3, [r7, #26]
 8005104:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005108:	837b      	strh	r3, [r7, #26]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	8b7b      	ldrh	r3, [r7, #26]
 8005116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
 800512a:	e1a2      	b.n	8005472 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	65bb      	str	r3, [r7, #88]	; 0x58
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005178:	4413      	add	r3, r2
 800517a:	65bb      	str	r3, [r7, #88]	; 0x58
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	011a      	lsls	r2, r3, #4
 8005182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005184:	4413      	add	r3, r2
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	657b      	str	r3, [r7, #84]	; 0x54
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	891b      	ldrh	r3, [r3, #8]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	4413      	add	r3, r2
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	895b      	ldrh	r3, [r3, #10]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 8091 	bne.w	80052fc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01b      	beq.n	800522a <USB_ActivateEndpoint+0x47e>
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	877b      	strh	r3, [r7, #58]	; 0x3a
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	873b      	strh	r3, [r7, #56]	; 0x38
 8005238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01b      	beq.n	800527a <USB_ActivateEndpoint+0x4ce>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	86fb      	strh	r3, [r7, #54]	; 0x36
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005292:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005298:	86bb      	strh	r3, [r7, #52]	; 0x34
 800529a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800529c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]
 80052fa:	e0ba      	b.n	8005472 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800530c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01d      	beq.n	8005354 <USB_ActivateEndpoint+0x5a8>
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005364:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01d      	beq.n	80053ac <USB_ActivateEndpoint+0x600>
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	78db      	ldrb	r3, [r3, #3]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d024      	beq.n	80053fe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053d2:	f083 0320 	eor.w	r3, r3, #32
 80053d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
 80053fc:	e01d      	b.n	800543a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800544c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005450:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005476:	4618      	mov	r0, r3
 8005478:	376c      	adds	r7, #108	; 0x6c
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005480:	b480      	push	{r7}
 8005482:	b08d      	sub	sp, #52	; 0x34
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	7b1b      	ldrb	r3, [r3, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f040 808e 	bne.w	80055b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d044      	beq.n	8005526 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	81bb      	strh	r3, [r7, #12]
 80054aa:	89bb      	ldrh	r3, [r7, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <USB_DeactivateEndpoint+0x6c>
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	817b      	strh	r3, [r7, #10]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005502:	813b      	strh	r3, [r7, #8]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	893b      	ldrh	r3, [r7, #8]
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]
 8005524:	e192      	b.n	800584c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	827b      	strh	r3, [r7, #18]
 8005534:	8a7b      	ldrh	r3, [r7, #18]
 8005536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01b      	beq.n	8005576 <USB_DeactivateEndpoint+0xf6>
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	823b      	strh	r3, [r7, #16]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	8a3b      	ldrh	r3, [r7, #16]
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558c:	81fb      	strh	r3, [r7, #14]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	441a      	add	r2, r3
 8005598:	89fb      	ldrh	r3, [r7, #14]
 800559a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	8013      	strh	r3, [r2, #0]
 80055ae:	e14d      	b.n	800584c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 80a5 	bne.w	8005704 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	843b      	strh	r3, [r7, #32]
 80055c8:	8c3b      	ldrh	r3, [r7, #32]
 80055ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01b      	beq.n	800560a <USB_DeactivateEndpoint+0x18a>
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	83fb      	strh	r3, [r7, #30]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	8bfb      	ldrh	r3, [r7, #30]
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	83bb      	strh	r3, [r7, #28]
 8005618:	8bbb      	ldrh	r3, [r7, #28]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01b      	beq.n	800565a <USB_DeactivateEndpoint+0x1da>
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	837b      	strh	r3, [r7, #26]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8b7b      	ldrh	r3, [r7, #26]
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005670:	833b      	strh	r3, [r7, #24]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	8b3b      	ldrh	r3, [r7, #24]
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	82fb      	strh	r3, [r7, #22]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	8afb      	ldrh	r3, [r7, #22]
 80056b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e0:	82bb      	strh	r3, [r7, #20]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	8abb      	ldrh	r3, [r7, #20]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
 8005702:	e0a3      	b.n	800584c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005712:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <USB_DeactivateEndpoint+0x2d4>
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <USB_DeactivateEndpoint+0x324>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	853b      	strh	r3, [r7, #40]	; 0x28
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	847b      	strh	r3, [r7, #34]	; 0x22
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3734      	adds	r7, #52	; 0x34
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b0c4      	sub	sp, #272	; 0x110
 800585c:	af00      	add	r7, sp, #0
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	6018      	str	r0, [r3, #0]
 8005862:	463b      	mov	r3, r7
 8005864:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 8557 	bne.w	8006320 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005872:	463b      	mov	r3, r7
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	429a      	cmp	r2, r3
 8005880:	d905      	bls.n	800588e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800588c:	e004      	b.n	8005898 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800588e:	463b      	mov	r3, r7
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005898:	463b      	mov	r3, r7
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	7b1b      	ldrb	r3, [r3, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12c      	bne.n	80058fc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6959      	ldr	r1, [r3, #20]
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	88da      	ldrh	r2, [r3, #6]
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	1d38      	adds	r0, r7, #4
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	f001 fa2c 	bl	8006d14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	011a      	lsls	r2, r3, #4
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058e4:	f107 0310 	add.w	r3, r7, #16
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f107 0310 	add.w	r3, r7, #16
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	f000 bcdd 	b.w	80062b6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b02      	cmp	r3, #2
 8005904:	f040 8347 	bne.w	8005f96 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	f240 82eb 	bls.w	8005ef0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005968:	1ad2      	subs	r2, r2, r3
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8159 	beq.w	8005c3e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800598c:	1d3b      	adds	r3, r7, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	637b      	str	r3, [r7, #52]	; 0x34
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d164      	bne.n	8005a66 <USB_EPStartXfer+0x20e>
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	4413      	add	r3, r2
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	4413      	add	r3, r2
 80059c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d112      	bne.n	80059f4 <USB_EPStartXfer+0x19c>
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	e054      	b.n	8005a9e <USB_EPStartXfer+0x246>
 80059f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f8:	2b3e      	cmp	r3, #62	; 0x3e
 80059fa:	d817      	bhi.n	8005a2c <USB_EPStartXfer+0x1d4>
 80059fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <USB_EPStartXfer+0x1c4>
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e038      	b.n	8005a9e <USB_EPStartXfer+0x246>
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0x1f4>
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e01b      	b.n	8005a9e <USB_EPStartXfer+0x246>
 8005a66:	463b      	mov	r3, r7
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d116      	bne.n	8005a9e <USB_EPStartXfer+0x246>
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7e:	4413      	add	r3, r2
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	011a      	lsls	r2, r3, #4
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a92:	633b      	str	r3, [r7, #48]	; 0x30
 8005a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	895b      	ldrh	r3, [r3, #10]
 8005aa4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6959      	ldr	r1, [r3, #20]
 8005aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ab8:	1d38      	adds	r0, r7, #4
 8005aba:	6800      	ldr	r0, [r0, #0]
 8005abc:	f001 f92a 	bl	8006d14 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aca:	441a      	add	r2, r3
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a1a      	ldr	r2, [r3, #32]
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d909      	bls.n	8005af6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	463b      	mov	r3, r7
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	621a      	str	r2, [r3, #32]
 8005af4:	e008      	b.n	8005b08 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b08:	463b      	mov	r3, r7
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d164      	bne.n	8005bdc <USB_EPStartXfer+0x384>
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	011a      	lsls	r2, r3, #4
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d112      	bne.n	8005b6a <USB_EPStartXfer+0x312>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	e057      	b.n	8005c1a <USB_EPStartXfer+0x3c2>
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b70:	d817      	bhi.n	8005ba2 <USB_EPStartXfer+0x34a>
 8005b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <USB_EPStartXfer+0x33a>
 8005b88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e03b      	b.n	8005c1a <USB_EPStartXfer+0x3c2>
 8005ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <USB_EPStartXfer+0x36a>
 8005bb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e01e      	b.n	8005c1a <USB_EPStartXfer+0x3c2>
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d119      	bne.n	8005c1a <USB_EPStartXfer+0x3c2>
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
 8005bec:	1d3b      	adds	r3, r7, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	4413      	add	r3, r2
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	011a      	lsls	r2, r3, #4
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	4413      	add	r3, r2
 8005c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	891b      	ldrh	r3, [r3, #8]
 8005c20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c24:	463b      	mov	r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c34:	1d38      	adds	r0, r7, #4
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	f001 f86c 	bl	8006d14 <USB_WritePMA>
 8005c3c:	e33b      	b.n	80062b6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d164      	bne.n	8005d12 <USB_EPStartXfer+0x4ba>
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5c:	4413      	add	r3, r2
 8005c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d112      	bne.n	8005ca0 <USB_EPStartXfer+0x448>
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e057      	b.n	8005d50 <USB_EPStartXfer+0x4f8>
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca6:	d817      	bhi.n	8005cd8 <USB_EPStartXfer+0x480>
 8005ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <USB_EPStartXfer+0x470>
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e03b      	b.n	8005d50 <USB_EPStartXfer+0x4f8>
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <USB_EPStartXfer+0x4a0>
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e01e      	b.n	8005d50 <USB_EPStartXfer+0x4f8>
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d119      	bne.n	8005d50 <USB_EPStartXfer+0x4f8>
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	657b      	str	r3, [r7, #84]	; 0x54
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d30:	4413      	add	r3, r2
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
 8005d34:	463b      	mov	r3, r7
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
 8005d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	891b      	ldrh	r3, [r3, #8]
 8005d56:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6959      	ldr	r1, [r3, #20]
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d6a:	1d38      	adds	r0, r7, #4
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f000 ffd1 	bl	8006d14 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7c:	441a      	add	r2, r3
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d909      	bls.n	8005da8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9e:	1ad2      	subs	r2, r2, r3
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	621a      	str	r2, [r3, #32]
 8005da6:	e008      	b.n	8005dba <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005db2:	463b      	mov	r3, r7
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d164      	bne.n	8005e94 <USB_EPStartXfer+0x63c>
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	4413      	add	r3, r2
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de2:	463b      	mov	r3, r7
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011a      	lsls	r2, r3, #4
 8005dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d112      	bne.n	8005e22 <USB_EPStartXfer+0x5ca>
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	e054      	b.n	8005ecc <USB_EPStartXfer+0x674>
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	2b3e      	cmp	r3, #62	; 0x3e
 8005e28:	d817      	bhi.n	8005e5a <USB_EPStartXfer+0x602>
 8005e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <USB_EPStartXfer+0x5f2>
 8005e40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e038      	b.n	8005ecc <USB_EPStartXfer+0x674>
 8005e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <USB_EPStartXfer+0x622>
 8005e70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e74:	3b01      	subs	r3, #1
 8005e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	029b      	lsls	r3, r3, #10
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e01b      	b.n	8005ecc <USB_EPStartXfer+0x674>
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	785b      	ldrb	r3, [r3, #1]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d116      	bne.n	8005ecc <USB_EPStartXfer+0x674>
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eac:	4413      	add	r3, r2
 8005eae:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	011a      	lsls	r2, r3, #4
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	895b      	ldrh	r3, [r3, #10]
 8005ed2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6959      	ldr	r1, [r3, #20]
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ee6:	1d38      	adds	r0, r7, #4
 8005ee8:	6800      	ldr	r0, [r0, #0]
 8005eea:	f000 ff13 	bl	8006d14 <USB_WritePMA>
 8005eee:	e1e2      	b.n	80062b6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	663b      	str	r3, [r7, #96]	; 0x60
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f52:	4413      	add	r3, r2
 8005f54:	663b      	str	r3, [r7, #96]	; 0x60
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	891b      	ldrh	r3, [r3, #8]
 8005f78:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6959      	ldr	r1, [r3, #20]
 8005f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005f8c:	1d38      	adds	r0, r7, #4
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	f000 fec0 	bl	8006d14 <USB_WritePMA>
 8005f94:	e18f      	b.n	80062b6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 808f 	beq.w	80060d0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d164      	bne.n	800608c <USB_EPStartXfer+0x834>
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd6:	4413      	add	r3, r2
 8005fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d112      	bne.n	800601a <USB_EPStartXfer+0x7c2>
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e054      	b.n	80060c4 <USB_EPStartXfer+0x86c>
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601e:	2b3e      	cmp	r3, #62	; 0x3e
 8006020:	d817      	bhi.n	8006052 <USB_EPStartXfer+0x7fa>
 8006022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800602c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <USB_EPStartXfer+0x7ea>
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	3301      	adds	r3, #1
 800603e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	b29b      	uxth	r3, r3
 8006048:	029b      	lsls	r3, r3, #10
 800604a:	b29a      	uxth	r2, r3
 800604c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e038      	b.n	80060c4 <USB_EPStartXfer+0x86c>
 8006052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <USB_EPStartXfer+0x81a>
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	3b01      	subs	r3, #1
 800606e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006076:	b29b      	uxth	r3, r3
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e01b      	b.n	80060c4 <USB_EPStartXfer+0x86c>
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d116      	bne.n	80060c4 <USB_EPStartXfer+0x86c>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a4:	4413      	add	r3, r2
 80060a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a8:	463b      	mov	r3, r7
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	011a      	lsls	r2, r3, #4
 80060b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b2:	4413      	add	r3, r2
 80060b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b8:	677b      	str	r3, [r7, #116]	; 0x74
 80060ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	895b      	ldrh	r3, [r3, #10]
 80060ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80060ce:	e097      	b.n	8006200 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d168      	bne.n	80061ac <USB_EPStartXfer+0x954>
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060f2:	4413      	add	r3, r2
 80060f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	011a      	lsls	r2, r3, #4
 8006100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006104:	4413      	add	r3, r2
 8006106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800610a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800610c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d112      	bne.n	800613a <USB_EPStartXfer+0x8e2>
 8006114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611e:	b29a      	uxth	r2, r3
 8006120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e05d      	b.n	80061f6 <USB_EPStartXfer+0x99e>
 800613a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613e:	2b3e      	cmp	r3, #62	; 0x3e
 8006140:	d817      	bhi.n	8006172 <USB_EPStartXfer+0x91a>
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800614c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <USB_EPStartXfer+0x90a>
 8006158:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800615c:	3301      	adds	r3, #1
 800615e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006166:	b29b      	uxth	r3, r3
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	b29a      	uxth	r2, r3
 800616c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e041      	b.n	80061f6 <USB_EPStartXfer+0x99e>
 8006172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800617c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <USB_EPStartXfer+0x93a>
 8006188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800618c:	3b01      	subs	r3, #1
 800618e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	e024      	b.n	80061f6 <USB_EPStartXfer+0x99e>
 80061ac:	463b      	mov	r3, r7
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	785b      	ldrb	r3, [r3, #1]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d11f      	bne.n	80061f6 <USB_EPStartXfer+0x99e>
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ce:	4413      	add	r3, r2
 80061d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	891b      	ldrh	r3, [r3, #8]
 80061fc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6959      	ldr	r1, [r3, #20]
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620a:	b29b      	uxth	r3, r3
 800620c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006210:	1d38      	adds	r0, r7, #4
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	f000 fd7e 	bl	8006d14 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d122      	bne.n	8006268 <USB_EPStartXfer+0xa10>
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006240:	1d3b      	adds	r3, r7, #4
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]
 8006266:	e026      	b.n	80062b6 <USB_EPStartXfer+0xa5e>
 8006268:	463b      	mov	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d121      	bne.n	80062b6 <USB_EPStartXfer+0xa5e>
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	463b      	mov	r3, r7
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006290:	1d3b      	adds	r3, r7, #4
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f107 020e 	add.w	r2, r7, #14
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	f107 030e 	add.w	r3, r7, #14
 80062da:	f107 020e 	add.w	r2, r7, #14
 80062de:	8812      	ldrh	r2, [r2, #0]
 80062e0:	f082 0210 	eor.w	r2, r2, #16
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	f107 030e 	add.w	r3, r7, #14
 80062ea:	f107 020e 	add.w	r2, r7, #14
 80062ee:	8812      	ldrh	r2, [r2, #0]
 80062f0:	f082 0220 	eor.w	r2, r2, #32
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	f107 030e 	add.w	r3, r7, #14
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631a:	b29b      	uxth	r3, r3
 800631c:	8013      	strh	r3, [r2, #0]
 800631e:	e3b5      	b.n	8006a8c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	7b1b      	ldrb	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 8090 	bne.w	800644c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d90e      	bls.n	800635a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	619a      	str	r2, [r3, #24]
 8006358:	e008      	b.n	800636c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800635a:	463b      	mov	r3, r7
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2200      	movs	r2, #0
 800636a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800636c:	1d3b      	adds	r3, r7, #4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006374:	1d3b      	adds	r3, r7, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006384:	4413      	add	r3, r2
 8006386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800638a:	463b      	mov	r3, r7
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	011a      	lsls	r2, r3, #4
 8006392:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006396:	4413      	add	r3, r2
 8006398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800639c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <USB_EPStartXfer+0xb7e>
 80063a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e32c      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	2b3e      	cmp	r3, #62	; 0x3e
 80063dc:	d818      	bhi.n	8006410 <USB_EPStartXfer+0xbb8>
 80063de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <USB_EPStartXfer+0xba6>
 80063f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063f8:	3301      	adds	r3, #1
 80063fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e30f      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800641a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <USB_EPStartXfer+0xbd8>
 8006426:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800642a:	3b01      	subs	r3, #1
 800642c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006430:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006434:	b29b      	uxth	r3, r3
 8006436:	029b      	lsls	r3, r3, #10
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e2f1      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	78db      	ldrb	r3, [r3, #3]
 8006452:	2b02      	cmp	r3, #2
 8006454:	f040 818f 	bne.w	8006776 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d175      	bne.n	800654e <USB_EPStartXfer+0xcf6>
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800647a:	4413      	add	r3, r2
 800647c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800648c:	4413      	add	r3, r2
 800648e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d116      	bne.n	80064ce <USB_EPStartXfer+0xc76>
 80064a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e065      	b.n	800659a <USB_EPStartXfer+0xd42>
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b3e      	cmp	r3, #62	; 0x3e
 80064d6:	d81a      	bhi.n	800650e <USB_EPStartXfer+0xcb6>
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USB_EPStartXfer+0xca4>
 80064f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f6:	3301      	adds	r3, #1
 80064f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006500:	b29b      	uxth	r3, r3
 8006502:	029b      	lsls	r3, r3, #10
 8006504:	b29a      	uxth	r2, r3
 8006506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e045      	b.n	800659a <USB_EPStartXfer+0xd42>
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USB_EPStartXfer+0xcda>
 8006528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800652c:	3b01      	subs	r3, #1
 800652e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006536:	b29b      	uxth	r3, r3
 8006538:	029b      	lsls	r3, r3, #10
 800653a:	b29b      	uxth	r3, r3
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29a      	uxth	r2, r3
 8006546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e025      	b.n	800659a <USB_EPStartXfer+0xd42>
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d120      	bne.n	800659a <USB_EPStartXfer+0xd42>
 8006558:	1d3b      	adds	r3, r7, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006560:	1d3b      	adds	r3, r7, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006568:	b29b      	uxth	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006570:	4413      	add	r3, r2
 8006572:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006576:	463b      	mov	r3, r7
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006582:	4413      	add	r3, r2
 8006584:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	b29a      	uxth	r2, r3
 8006594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006598:	801a      	strh	r2, [r3, #0]
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d175      	bne.n	8006698 <USB_EPStartXfer+0xe40>
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065c4:	4413      	add	r3, r2
 80065c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d116      	bne.n	8006618 <USB_EPStartXfer+0xdc0>
 80065ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660e:	b29a      	uxth	r2, r3
 8006610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e061      	b.n	80066dc <USB_EPStartXfer+0xe84>
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b3e      	cmp	r3, #62	; 0x3e
 8006620:	d81a      	bhi.n	8006658 <USB_EPStartXfer+0xe00>
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <USB_EPStartXfer+0xdee>
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	3301      	adds	r3, #1
 8006642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664a:	b29b      	uxth	r3, r3
 800664c:	029b      	lsls	r3, r3, #10
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e041      	b.n	80066dc <USB_EPStartXfer+0xe84>
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <USB_EPStartXfer+0xe24>
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	3b01      	subs	r3, #1
 8006678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e021      	b.n	80066dc <USB_EPStartXfer+0xe84>
 8006698:	463b      	mov	r3, r7
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d11c      	bne.n	80066dc <USB_EPStartXfer+0xe84>
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b2:	4413      	add	r3, r2
 80066b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	011a      	lsls	r2, r3, #4
 80066c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 81a4 	beq.w	8006a30 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <USB_EPStartXfer+0xebc>
 8006708:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10d      	bne.n	8006730 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006714:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 8187 	bne.w	8006a30 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006722:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 8180 	bne.w	8006a30 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	463b      	mov	r3, r7
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]
 8006774:	e15c      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006776:	463b      	mov	r3, r7
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	78db      	ldrb	r3, [r3, #3]
 800677c:	2b01      	cmp	r3, #1
 800677e:	f040 8155 	bne.w	8006a2c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90e      	bls.n	80067b0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	619a      	str	r2, [r3, #24]
 80067ae:	e008      	b.n	80067c2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067c2:	463b      	mov	r3, r7
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d16f      	bne.n	80068ac <USB_EPStartXfer+0x1054>
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d4:	1d3b      	adds	r3, r7, #4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067e4:	4413      	add	r3, r2
 80067e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067ea:	463b      	mov	r3, r7
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	011a      	lsls	r2, r3, #4
 80067f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d116      	bne.n	8006836 <USB_EPStartXfer+0xfde>
 8006808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006814:	b29a      	uxth	r2, r3
 8006816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682c:	b29a      	uxth	r2, r3
 800682e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006832:	801a      	strh	r2, [r3, #0]
 8006834:	e05f      	b.n	80068f6 <USB_EPStartXfer+0x109e>
 8006836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683a:	2b3e      	cmp	r3, #62	; 0x3e
 800683c:	d818      	bhi.n	8006870 <USB_EPStartXfer+0x1018>
 800683e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <USB_EPStartXfer+0x1006>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	3301      	adds	r3, #1
 800685a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006862:	b29b      	uxth	r3, r3
 8006864:	029b      	lsls	r3, r3, #10
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e042      	b.n	80068f6 <USB_EPStartXfer+0x109e>
 8006870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <USB_EPStartXfer+0x1038>
 8006886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688a:	3b01      	subs	r3, #1
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	b29b      	uxth	r3, r3
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	b29b      	uxth	r3, r3
 800689a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e024      	b.n	80068f6 <USB_EPStartXfer+0x109e>
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d11f      	bne.n	80068f6 <USB_EPStartXfer+0x109e>
 80068b6:	1d3b      	adds	r3, r7, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ce:	4413      	add	r3, r2
 80068d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068d4:	463b      	mov	r3, r7
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	011a      	lsls	r2, r3, #4
 80068dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068fe:	463b      	mov	r3, r7
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d16f      	bne.n	80069e8 <USB_EPStartXfer+0x1190>
 8006908:	1d3b      	adds	r3, r7, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006918:	b29b      	uxth	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006920:	4413      	add	r3, r2
 8006922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	011a      	lsls	r2, r3, #4
 800692e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006932:	4413      	add	r3, r2
 8006934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d116      	bne.n	8006972 <USB_EPStartXfer+0x111a>
 8006944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006968:	b29a      	uxth	r2, r3
 800696a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800696e:	801a      	strh	r2, [r3, #0]
 8006970:	e05e      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006976:	2b3e      	cmp	r3, #62	; 0x3e
 8006978:	d818      	bhi.n	80069ac <USB_EPStartXfer+0x1154>
 800697a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697e:	085b      	lsrs	r3, r3, #1
 8006980:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <USB_EPStartXfer+0x1142>
 8006990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006994:	3301      	adds	r3, #1
 8006996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800699a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699e:	b29b      	uxth	r3, r3
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e041      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
 80069ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <USB_EPStartXfer+0x1174>
 80069c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069de:	b29a      	uxth	r2, r3
 80069e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	e023      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
 80069e8:	463b      	mov	r3, r7
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d11e      	bne.n	8006a30 <USB_EPStartXfer+0x11d8>
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e001      	b.n	8006a30 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e02e      	b.n	8006a8e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a30:	1d3b      	adds	r3, r7, #4
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a56:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a5a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d020      	beq.n	8006aec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac0:	81bb      	strh	r3, [r7, #12]
 8006ac2:	89bb      	ldrh	r3, [r7, #12]
 8006ac4:	f083 0310 	eor.w	r3, r3, #16
 8006ac8:	81bb      	strh	r3, [r7, #12]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	89bb      	ldrh	r3, [r7, #12]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
 8006aea:	e01f      	b.n	8006b2c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	81fb      	strh	r3, [r7, #14]
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b0a:	81fb      	strh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	441a      	add	r2, r3
 8006b16:	89fb      	ldrh	r3, [r7, #14]
 8006b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	7b1b      	ldrb	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 809d 	bne.w	8006c86 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04c      	beq.n	8006bee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	823b      	strh	r3, [r7, #16]
 8006b62:	8a3b      	ldrh	r3, [r7, #16]
 8006b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <USB_EPClearStall+0x6c>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	81fb      	strh	r3, [r7, #14]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	89fb      	ldrh	r3, [r7, #14]
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	78db      	ldrb	r3, [r3, #3]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d06c      	beq.n	8006c86 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc2:	81bb      	strh	r3, [r7, #12]
 8006bc4:	89bb      	ldrh	r3, [r7, #12]
 8006bc6:	f083 0320 	eor.w	r3, r3, #32
 8006bca:	81bb      	strh	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	89bb      	ldrh	r3, [r7, #12]
 8006bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	8013      	strh	r3, [r2, #0]
 8006bec:	e04b      	b.n	8006c86 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	82fb      	strh	r3, [r7, #22]
 8006bfc:	8afb      	ldrh	r3, [r7, #22]
 8006bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01b      	beq.n	8006c3e <USB_EPClearStall+0x106>
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	82bb      	strh	r3, [r7, #20]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	441a      	add	r2, r3
 8006c28:	8abb      	ldrh	r3, [r7, #20]
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	827b      	strh	r3, [r7, #18]
 8006c56:	8a7b      	ldrh	r3, [r7, #18]
 8006c58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c5c:	827b      	strh	r3, [r7, #18]
 8006c5e:	8a7b      	ldrh	r3, [r7, #18]
 8006c60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c64:	827b      	strh	r3, [r7, #18]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8a7b      	ldrh	r3, [r7, #18]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr

08006c92 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b08d      	sub	sp, #52	; 0x34
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	460b      	mov	r3, r1
 8006d24:	80fb      	strh	r3, [r7, #6]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d2a:	88bb      	ldrh	r3, [r7, #4]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	005a      	lsls	r2, r3, #1
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4c:	e01e      	b.n	8006d8c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	3301      	adds	r3, #1
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	3302      	adds	r3, #2
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	3301      	adds	r3, #1
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1dd      	bne.n	8006d4e <USB_WritePMA+0x3a>
  }
}
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	3734      	adds	r7, #52	; 0x34
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b08b      	sub	sp, #44	; 0x2c
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	4611      	mov	r1, r2
 8006daa:	461a      	mov	r2, r3
 8006dac:	460b      	mov	r3, r1
 8006dae:	80fb      	strh	r3, [r7, #6]
 8006db0:	4613      	mov	r3, r2
 8006db2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006db4:	88bb      	ldrh	r3, [r7, #4]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	005a      	lsls	r2, r3, #1
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	e01b      	b.n	8006e10 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	3302      	adds	r3, #2
 8006de4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	3301      	adds	r3, #1
 8006df2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	0a1b      	lsrs	r3, r3, #8
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	3301      	adds	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	3302      	adds	r3, #2
 8006e08:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e0      	bne.n	8006dd8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e16:	88bb      	ldrh	r3, [r7, #4]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	701a      	strb	r2, [r3, #0]
  }
}
 8006e32:	bf00      	nop
 8006e34:	372c      	adds	r7, #44	; 0x2c
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7c1b      	ldrb	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d115      	bne.n	8006e80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e58:	2202      	movs	r2, #2
 8006e5a:	2181      	movs	r1, #129	; 0x81
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fe36 	bl	8008ace <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe2c 	bl	8008ace <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e7e:	e012      	b.n	8006ea6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	2202      	movs	r2, #2
 8006e84:	2181      	movs	r1, #129	; 0x81
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fe21 	bl	8008ace <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e92:	2340      	movs	r3, #64	; 0x40
 8006e94:	2202      	movs	r2, #2
 8006e96:	2101      	movs	r1, #1
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fe18 	bl	8008ace <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	2182      	movs	r1, #130	; 0x82
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fe0e 	bl	8008ace <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006eb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ebc:	f001 ff2e 	bl	8008d1c <USBD_static_malloc>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	73fb      	strb	r3, [r7, #15]
 8006ed6:	e026      	b.n	8006f26 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7c1b      	ldrb	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fece 	bl	8008cb0 <USBD_LL_PrepareReceive>
 8006f14:	e007      	b.n	8006f26 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f1c:	2340      	movs	r3, #64	; 0x40
 8006f1e:	2101      	movs	r1, #1
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fec5 	bl	8008cb0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f40:	2181      	movs	r1, #129	; 0x81
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fde9 	bl	8008b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f4e:	2101      	movs	r1, #1
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fde2 	bl	8008b1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f5e:	2182      	movs	r1, #130	; 0x82
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 fdda 	bl	8008b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00e      	beq.n	8006f94 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 fed4 	bl	8008d34 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d039      	beq.n	800703c <USBD_CDC_Setup+0x9e>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d17f      	bne.n	80070cc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	88db      	ldrh	r3, [r3, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d029      	beq.n	8007028 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da11      	bge.n	8007002 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006fea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	88d2      	ldrh	r2, [r2, #6]
 8006ff0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ff2:	6939      	ldr	r1, [r7, #16]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	88db      	ldrh	r3, [r3, #6]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f9d9 	bl	80083b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007000:	e06b      	b.n	80070da <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	785a      	ldrb	r2, [r3, #1]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007018:	6939      	ldr	r1, [r7, #16]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	461a      	mov	r2, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 f9f4 	bl	800840e <USBD_CtlPrepareRx>
      break;
 8007026:	e058      	b.n	80070da <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	7850      	ldrb	r0, [r2, #1]
 8007034:	2200      	movs	r2, #0
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	4798      	blx	r3
      break;
 800703a:	e04e      	b.n	80070da <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b0b      	cmp	r3, #11
 8007042:	d02e      	beq.n	80070a2 <USBD_CDC_Setup+0x104>
 8007044:	2b0b      	cmp	r3, #11
 8007046:	dc38      	bgt.n	80070ba <USBD_CDC_Setup+0x11c>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <USBD_CDC_Setup+0xb4>
 800704c:	2b0a      	cmp	r3, #10
 800704e:	d014      	beq.n	800707a <USBD_CDC_Setup+0xdc>
 8007050:	e033      	b.n	80070ba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	2b03      	cmp	r3, #3
 800705a:	d107      	bne.n	800706c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	2202      	movs	r2, #2
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 f9a4 	bl	80083b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800706a:	e02e      	b.n	80070ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f935 	bl	80082de <USBD_CtlError>
            ret = USBD_FAIL;
 8007074:	2302      	movs	r3, #2
 8007076:	75fb      	strb	r3, [r7, #23]
          break;
 8007078:	e027      	b.n	80070ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	2b03      	cmp	r3, #3
 8007082:	d107      	bne.n	8007094 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007084:	f107 030f 	add.w	r3, r7, #15
 8007088:	2201      	movs	r2, #1
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f990 	bl	80083b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007092:	e01a      	b.n	80070ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 f921 	bl	80082de <USBD_CtlError>
            ret = USBD_FAIL;
 800709c:	2302      	movs	r3, #2
 800709e:	75fb      	strb	r3, [r7, #23]
          break;
 80070a0:	e013      	b.n	80070ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d00d      	beq.n	80070c8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 f915 	bl	80082de <USBD_CtlError>
            ret = USBD_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070b8:	e006      	b.n	80070c8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f90e 	bl	80082de <USBD_CtlError>
          ret = USBD_FAIL;
 80070c2:	2302      	movs	r3, #2
 80070c4:	75fb      	strb	r3, [r7, #23]
          break;
 80070c6:	e000      	b.n	80070ca <USBD_CDC_Setup+0x12c>
          break;
 80070c8:	bf00      	nop
      }
      break;
 80070ca:	e006      	b.n	80070da <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 f905 	bl	80082de <USBD_CtlError>
      ret = USBD_FAIL;
 80070d4:	2302      	movs	r3, #2
 80070d6:	75fb      	strb	r3, [r7, #23]
      break;
 80070d8:	bf00      	nop
  }

  return ret;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070fe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d03a      	beq.n	8007180 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	6879      	ldr	r1, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	440b      	add	r3, r1
 8007118:	331c      	adds	r3, #28
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d029      	beq.n	8007174 <USBD_CDC_DataIn+0x90>
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	331c      	adds	r3, #28
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	78f9      	ldrb	r1, [r7, #3]
 8007134:	68b8      	ldr	r0, [r7, #8]
 8007136:	460b      	mov	r3, r1
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4403      	add	r3, r0
 8007140:	3338      	adds	r3, #56	; 0x38
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	fbb2 f1f3 	udiv	r1, r2, r3
 8007148:	fb03 f301 	mul.w	r3, r3, r1
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d110      	bne.n	8007174 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	331c      	adds	r3, #28
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007166:	78f9      	ldrb	r1, [r7, #3]
 8007168:	2300      	movs	r3, #0
 800716a:	2200      	movs	r2, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fd7c 	bl	8008c6a <USBD_LL_Transmit>
 8007172:	e003      	b.n	800717c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	e000      	b.n	8007182 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007180:	2302      	movs	r3, #2
  }
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fda7 	bl	8008cf6 <USBD_LL_GetRxDataSize>
 80071a8:	4602      	mov	r2, r0
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071ce:	4611      	mov	r1, r2
 80071d0:	4798      	blx	r3

    return USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e000      	b.n	80071d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071d6:	2302      	movs	r3, #2
  }
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d015      	beq.n	8007226 <USBD_CDC_EP0_RxReady+0x46>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007200:	2bff      	cmp	r3, #255	; 0xff
 8007202:	d010      	beq.n	8007226 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007212:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800721a:	b292      	uxth	r2, r2
 800721c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	22ff      	movs	r2, #255	; 0xff
 8007222:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2243      	movs	r2, #67	; 0x43
 800723c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800723e:	4b03      	ldr	r3, [pc, #12]	; (800724c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000094 	.word	0x20000094

08007250 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2243      	movs	r2, #67	; 0x43
 800725c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800725e:	4b03      	ldr	r3, [pc, #12]	; (800726c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000050 	.word	0x20000050

08007270 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2243      	movs	r2, #67	; 0x43
 800727c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800727e:	4b03      	ldr	r3, [pc, #12]	; (800728c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	200000d8 	.word	0x200000d8

08007290 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	220a      	movs	r2, #10
 800729c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800729e:	4b03      	ldr	r3, [pc, #12]	; (80072ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000000c 	.word	0x2000000c

080072b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80072ba:	2302      	movs	r3, #2
 80072bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr

080072dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	bc80      	pop	{r7}
 8007332:	4770      	bx	lr

08007334 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d017      	beq.n	800737e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	7c1b      	ldrb	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	2101      	movs	r1, #1
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f001 fca4 	bl	8008cb0 <USBD_LL_PrepareReceive>
 8007368:	e007      	b.n	800737a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 fc9b 	bl	8008cb0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	e000      	b.n	8007380 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800737e:	2302      	movs	r3, #2
  }
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	e01a      	b.n	80073d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f001 fb08 	bl	80089e4 <USBD_LL_Init>

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d006      	beq.n	8007400 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	e001      	b.n	8007404 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007400:	2302      	movs	r3, #2
 8007402:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr

08007410 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fb3d 	bl	8008a98 <USBD_LL_Start>

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr

0800743c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007448:	2302      	movs	r3, #2
 800744a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00c      	beq.n	8007470 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	4611      	mov	r1, r2
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	4611      	mov	r1, r2
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3

  return USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fed7 	bl	8008266 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d016      	beq.n	800750a <USBD_LL_SetupStage+0x6a>
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d81c      	bhi.n	800751a <USBD_LL_SetupStage+0x7a>
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <USBD_LL_SetupStage+0x4a>
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d008      	beq.n	80074fa <USBD_LL_SetupStage+0x5a>
 80074e8:	e017      	b.n	800751a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9ca 	bl	800788c <USBD_StdDevReq>
      break;
 80074f8:	e01a      	b.n	8007530 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa2c 	bl	8007960 <USBD_StdItfReq>
      break;
 8007508:	e012      	b.n	8007530 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa6c 	bl	80079f0 <USBD_StdEPReq>
      break;
 8007518:	e00a      	b.n	8007530 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007524:	b2db      	uxtb	r3, r3
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 fb15 	bl	8008b58 <USBD_LL_StallEP>
      break;
 800752e:	bf00      	nop
  }

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	460b      	mov	r3, r1
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d14b      	bne.n	80075e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007554:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800755c:	2b03      	cmp	r3, #3
 800755e:	d134      	bne.n	80075ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	429a      	cmp	r2, r3
 800756a:	d919      	bls.n	80075a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007582:	429a      	cmp	r2, r3
 8007584:	d203      	bcs.n	800758e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800758a:	b29b      	uxth	r3, r3
 800758c:	e002      	b.n	8007594 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 ff56 	bl	800844a <USBD_CtlContinueRx>
 800759e:	e038      	b.n	8007612 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d105      	bne.n	80075c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 ff53 	bl	800846e <USBD_CtlSendStatus>
 80075c8:	e023      	b.n	8007612 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	d11e      	bne.n	8007612 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075dc:	2100      	movs	r1, #0
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f001 faba 	bl	8008b58 <USBD_LL_StallEP>
 80075e4:	e015      	b.n	8007612 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00d      	beq.n	800760e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d108      	bne.n	800760e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	7afa      	ldrb	r2, [r7, #11]
 8007606:	4611      	mov	r1, r2
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	4798      	blx	r3
 800760c:	e001      	b.n	8007612 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800760e:	2302      	movs	r3, #2
 8007610:	e000      	b.n	8007614 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	460b      	mov	r3, r1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d17f      	bne.n	8007730 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3314      	adds	r3, #20
 8007634:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800763c:	2b02      	cmp	r3, #2
 800763e:	d15c      	bne.n	80076fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	d915      	bls.n	8007678 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	1ad2      	subs	r2, r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fec0 	bl	80083ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800766a:	2300      	movs	r3, #0
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f001 fb1d 	bl	8008cb0 <USBD_LL_PrepareReceive>
 8007676:	e04e      	b.n	8007716 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	6912      	ldr	r2, [r2, #16]
 8007680:	fbb3 f1f2 	udiv	r1, r3, r2
 8007684:	fb02 f201 	mul.w	r2, r2, r1
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d11c      	bne.n	80076c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007696:	429a      	cmp	r2, r3
 8007698:	d316      	bcc.n	80076c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	689a      	ldr	r2, [r3, #8]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d20f      	bcs.n	80076c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076a8:	2200      	movs	r2, #0
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fe9c 	bl	80083ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076ba:	2300      	movs	r3, #0
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f001 faf5 	bl	8008cb0 <USBD_LL_PrepareReceive>
 80076c6:	e026      	b.n	8007716 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d105      	bne.n	80076ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f001 fa33 	bl	8008b58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fece 	bl	8008494 <USBD_CtlReceiveStatus>
 80076f8:	e00d      	b.n	8007716 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007700:	2b04      	cmp	r3, #4
 8007702:	d004      	beq.n	800770e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800770e:	2180      	movs	r1, #128	; 0x80
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f001 fa21 	bl	8008b58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11d      	bne.n	800775c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fe81 	bl	8007428 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800772e:	e015      	b.n	800775c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00d      	beq.n	8007758 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007742:	2b03      	cmp	r3, #3
 8007744:	d108      	bne.n	8007758 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	7afa      	ldrb	r2, [r7, #11]
 8007750:	4611      	mov	r1, r2
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	4798      	blx	r3
 8007756:	e001      	b.n	800775c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	e000      	b.n	800775e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f9aa 	bl	8008ace <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2240      	movs	r2, #64	; 0x40
 8007786:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800778a:	2340      	movs	r3, #64	; 0x40
 800778c:	2200      	movs	r2, #0
 800778e:	2180      	movs	r1, #128	; 0x80
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f99c 	bl	8008ace <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2240      	movs	r2, #64	; 0x40
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6852      	ldr	r2, [r2, #4]
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	4611      	mov	r1, r2
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
  }

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2204      	movs	r2, #4
 800781e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	bc80      	pop	{r7}
 800782c:	4770      	bx	lr

0800782e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	2b04      	cmp	r3, #4
 800783e:	d105      	bne.n	800784c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr

08007858 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	2b03      	cmp	r3, #3
 8007868:	d10b      	bne.n	8007882 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d005      	beq.n	80078b2 <USBD_StdDevReq+0x26>
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d84f      	bhi.n	800794a <USBD_StdDevReq+0xbe>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <USBD_StdDevReq+0x36>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d14b      	bne.n	800794a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
      break;
 80078c0:	e048      	b.n	8007954 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b09      	cmp	r3, #9
 80078c8:	d839      	bhi.n	800793e <USBD_StdDevReq+0xb2>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBD_StdDevReq+0x44>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007921 	.word	0x08007921
 80078d4:	08007935 	.word	0x08007935
 80078d8:	0800793f 	.word	0x0800793f
 80078dc:	0800792b 	.word	0x0800792b
 80078e0:	0800793f 	.word	0x0800793f
 80078e4:	08007903 	.word	0x08007903
 80078e8:	080078f9 	.word	0x080078f9
 80078ec:	0800793f 	.word	0x0800793f
 80078f0:	08007917 	.word	0x08007917
 80078f4:	0800790d 	.word	0x0800790d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9dc 	bl	8007cb8 <USBD_GetDescriptor>
          break;
 8007900:	e022      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb3f 	bl	8007f88 <USBD_SetAddress>
          break;
 800790a:	e01d      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fb7e 	bl	8008010 <USBD_SetConfig>
          break;
 8007914:	e018      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc07 	bl	800812c <USBD_GetConfig>
          break;
 800791e:	e013      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc37 	bl	8008196 <USBD_GetStatus>
          break;
 8007928:	e00e      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc65 	bl	80081fc <USBD_SetFeature>
          break;
 8007932:	e009      	b.n	8007948 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc74 	bl	8008224 <USBD_ClrFeature>
          break;
 800793c:	e004      	b.n	8007948 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fccc 	bl	80082de <USBD_CtlError>
          break;
 8007946:	bf00      	nop
      }
      break;
 8007948:	e004      	b.n	8007954 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fcc6 	bl	80082de <USBD_CtlError>
      break;
 8007952:	bf00      	nop
  }

  return ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop

08007960 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d005      	beq.n	8007986 <USBD_StdItfReq+0x26>
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d82e      	bhi.n	80079dc <USBD_StdItfReq+0x7c>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <USBD_StdItfReq+0x26>
 8007982:	2b20      	cmp	r3, #32
 8007984:	d12a      	bne.n	80079dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798c:	3b01      	subs	r3, #1
 800798e:	2b02      	cmp	r3, #2
 8007990:	d81d      	bhi.n	80079ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	889b      	ldrh	r3, [r3, #4]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d813      	bhi.n	80079c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	88db      	ldrh	r3, [r3, #6]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d110      	bne.n	80079d8 <USBD_StdItfReq+0x78>
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10d      	bne.n	80079d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fd56 	bl	800846e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079c2:	e009      	b.n	80079d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc89 	bl	80082de <USBD_CtlError>
          break;
 80079cc:	e004      	b.n	80079d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc84 	bl	80082de <USBD_CtlError>
          break;
 80079d6:	e000      	b.n	80079da <USBD_StdItfReq+0x7a>
          break;
 80079d8:	bf00      	nop
      }
      break;
 80079da:	e004      	b.n	80079e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fc7d 	bl	80082de <USBD_CtlError>
      break;
 80079e4:	bf00      	nop
  }

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	889b      	ldrh	r3, [r3, #4]
 8007a02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d007      	beq.n	8007a20 <USBD_StdEPReq+0x30>
 8007a10:	2b40      	cmp	r3, #64	; 0x40
 8007a12:	f200 8146 	bhi.w	8007ca2 <USBD_StdEPReq+0x2b2>
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <USBD_StdEPReq+0x40>
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	f040 8141 	bne.w	8007ca2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      break;
 8007a2e:	e13d      	b.n	8007cac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d10a      	bne.n	8007a52 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	e12d      	b.n	8007cae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	785b      	ldrb	r3, [r3, #1]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d007      	beq.n	8007a6a <USBD_StdEPReq+0x7a>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	f300 811b 	bgt.w	8007c96 <USBD_StdEPReq+0x2a6>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d072      	beq.n	8007b4a <USBD_StdEPReq+0x15a>
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d03a      	beq.n	8007ade <USBD_StdEPReq+0xee>
 8007a68:	e115      	b.n	8007c96 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d002      	beq.n	8007a7a <USBD_StdEPReq+0x8a>
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d015      	beq.n	8007aa4 <USBD_StdEPReq+0xb4>
 8007a78:	e02b      	b.n	8007ad2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00c      	beq.n	8007a9a <USBD_StdEPReq+0xaa>
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b80      	cmp	r3, #128	; 0x80
 8007a84:	d009      	beq.n	8007a9a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f864 	bl	8008b58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 f860 	bl	8008b58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a98:	e020      	b.n	8007adc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fc1e 	bl	80082de <USBD_CtlError>
              break;
 8007aa2:	e01b      	b.n	8007adc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10e      	bne.n	8007aca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <USBD_StdEPReq+0xda>
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d008      	beq.n	8007aca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f847 	bl	8008b58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fccf 	bl	800846e <USBD_CtlSendStatus>

              break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc02 	bl	80082de <USBD_CtlError>
              break;
 8007ada:	bf00      	nop
          }
          break;
 8007adc:	e0e0      	b.n	8007ca0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d002      	beq.n	8007aee <USBD_StdEPReq+0xfe>
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d015      	beq.n	8007b18 <USBD_StdEPReq+0x128>
 8007aec:	e026      	b.n	8007b3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <USBD_StdEPReq+0x11e>
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b80      	cmp	r3, #128	; 0x80
 8007af8:	d009      	beq.n	8007b0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 f82a 	bl	8008b58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 f826 	bl	8008b58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b0c:	e01c      	b.n	8007b48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fbe4 	bl	80082de <USBD_CtlError>
              break;
 8007b16:	e017      	b.n	8007b48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	885b      	ldrh	r3, [r3, #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d112      	bne.n	8007b46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 f831 	bl	8008b96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fc9a 	bl	800846e <USBD_CtlSendStatus>
              }
              break;
 8007b3a:	e004      	b.n	8007b46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fbcd 	bl	80082de <USBD_CtlError>
              break;
 8007b44:	e000      	b.n	8007b48 <USBD_StdEPReq+0x158>
              break;
 8007b46:	bf00      	nop
          }
          break;
 8007b48:	e0aa      	b.n	8007ca0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d002      	beq.n	8007b5a <USBD_StdEPReq+0x16a>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d032      	beq.n	8007bbe <USBD_StdEPReq+0x1ce>
 8007b58:	e097      	b.n	8007c8a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <USBD_StdEPReq+0x180>
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	2b80      	cmp	r3, #128	; 0x80
 8007b64:	d004      	beq.n	8007b70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fbb8 	bl	80082de <USBD_CtlError>
                break;
 8007b6e:	e091      	b.n	8007c94 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	da0b      	bge.n	8007b90 <USBD_StdEPReq+0x1a0>
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	3310      	adds	r3, #16
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	e00b      	b.n	8007ba8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fbfb 	bl	80083b2 <USBD_CtlSendData>
              break;
 8007bbc:	e06a      	b.n	8007c94 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da11      	bge.n	8007bea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
 8007bc8:	f003 020f 	and.w	r2, r3, #15
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	3318      	adds	r3, #24
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d117      	bne.n	8007c10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fb7b 	bl	80082de <USBD_CtlError>
                  break;
 8007be8:	e054      	b.n	8007c94 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb68 	bl	80082de <USBD_CtlError>
                  break;
 8007c0e:	e041      	b.n	8007c94 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da0b      	bge.n	8007c30 <USBD_StdEPReq+0x240>
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	3310      	adds	r3, #16
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	e00b      	b.n	8007c48 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	3304      	adds	r3, #4
 8007c48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <USBD_StdEPReq+0x266>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d103      	bne.n	8007c5e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	e00e      	b.n	8007c7c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c5e:	7bbb      	ldrb	r3, [r7, #14]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 ffb6 	bl	8008bd4 <USBD_LL_IsStallEP>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e002      	b.n	8007c7c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fb95 	bl	80083b2 <USBD_CtlSendData>
              break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fb26 	bl	80082de <USBD_CtlError>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e004      	b.n	8007ca0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb20 	bl	80082de <USBD_CtlError>
          break;
 8007c9e:	bf00      	nop
      }
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb1a 	bl	80082de <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	f200 8128 	bhi.w	8007f2e <USBD_GetDescriptor+0x276>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_GetDescriptor+0x2c>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007f2f 	.word	0x08007f2f
 8007cf4:	08007f2f 	.word	0x08007f2f
 8007cf8:	08007ecf 	.word	0x08007ecf
 8007cfc:	08007efb 	.word	0x08007efb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
      break;
 8007d16:	e112      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7c1b      	ldrb	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f107 0208 	add.w	r2, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d3a:	e100      	b.n	8007f3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	f107 0208 	add.w	r2, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
      break;
 8007d56:	e0f2      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	885b      	ldrh	r3, [r3, #2]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	f200 80ac 	bhi.w	8007ebc <USBD_GetDescriptor+0x204>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <USBD_GetDescriptor+0xb4>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007ded 	.word	0x08007ded
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e55 	.word	0x08007e55
 8007d80:	08007e89 	.word	0x08007e89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e091      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa97 	bl	80082de <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e089      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7c12      	ldrb	r2, [r2, #16]
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dda:	e077      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa7d 	bl	80082de <USBD_CtlError>
            err++;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	3301      	adds	r3, #1
 8007de8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dea:	e06f      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0e:	e05d      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa63 	bl	80082de <USBD_CtlError>
            err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1e:	e055      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e42:	e043      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa49 	bl	80082de <USBD_CtlError>
            err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
          break;
 8007e52:	e03b      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e76:	e029      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa2f 	bl	80082de <USBD_CtlError>
            err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
          break;
 8007e86:	e021      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e00f      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa15 	bl	80082de <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e007      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa0d 	bl	80082de <USBD_CtlError>
          err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007eca:	e038      	b.n	8007f3e <USBD_GetDescriptor+0x286>
 8007ecc:	e037      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1b      	ldrb	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	f107 0208 	add.w	r2, r7, #8
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
 8007ee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee8:	e029      	b.n	8007f3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9f6 	bl	80082de <USBD_CtlError>
        err++;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef8:	e021      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7c1b      	ldrb	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10d      	bne.n	8007f1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f107 0208 	add.w	r2, r7, #8
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4798      	blx	r3
 8007f12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	2207      	movs	r2, #7
 8007f1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f1c:	e00f      	b.n	8007f3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f9dc 	bl	80082de <USBD_CtlError>
        err++;
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f2c:	e007      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f9d4 	bl	80082de <USBD_CtlError>
      err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	bf00      	nop
  }

  if (err != 0U)
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d11c      	bne.n	8007f7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d011      	beq.n	8007f6e <USBD_GetDescriptor+0x2b6>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00d      	beq.n	8007f6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	88da      	ldrh	r2, [r3, #6]
 8007f56:	893b      	ldrh	r3, [r7, #8]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bf28      	it	cs
 8007f5c:	4613      	movcs	r3, r2
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f62:	893b      	ldrh	r3, [r7, #8]
 8007f64:	461a      	mov	r2, r3
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa22 	bl	80083b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa79 	bl	800846e <USBD_CtlSendStatus>
 8007f7c:	e000      	b.n	8007f80 <USBD_GetDescriptor+0x2c8>
    return;
 8007f7e:	bf00      	nop
    }
  }
}
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop

08007f88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	889b      	ldrh	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d130      	bne.n	8007ffc <USBD_SetAddress+0x74>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d12c      	bne.n	8007ffc <USBD_SetAddress+0x74>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	885b      	ldrh	r3, [r3, #2]
 8007fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa8:	d828      	bhi.n	8007ffc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	885b      	ldrh	r3, [r3, #2]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d104      	bne.n	8007fca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f98b 	bl	80082de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc8:	e01d      	b.n	8008006 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7bfa      	ldrb	r2, [r7, #15]
 8007fce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fe28 	bl	8008c2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa46 	bl	800846e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	e009      	b.n	8008006 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	e004      	b.n	8008006 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f96d 	bl	80082de <USBD_CtlError>
  }
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	885b      	ldrh	r3, [r3, #2]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	4b41      	ldr	r3, [pc, #260]	; (8008128 <USBD_SetConfig+0x118>)
 8008022:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008024:	4b40      	ldr	r3, [pc, #256]	; (8008128 <USBD_SetConfig+0x118>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d904      	bls.n	8008036 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f955 	bl	80082de <USBD_CtlError>
 8008034:	e075      	b.n	8008122 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803c:	2b02      	cmp	r3, #2
 800803e:	d002      	beq.n	8008046 <USBD_SetConfig+0x36>
 8008040:	2b03      	cmp	r3, #3
 8008042:	d023      	beq.n	800808c <USBD_SetConfig+0x7c>
 8008044:	e062      	b.n	800810c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008046:	4b38      	ldr	r3, [pc, #224]	; (8008128 <USBD_SetConfig+0x118>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01a      	beq.n	8008084 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800804e:	4b36      	ldr	r3, [pc, #216]	; (8008128 <USBD_SetConfig+0x118>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2203      	movs	r2, #3
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008060:	4b31      	ldr	r3, [pc, #196]	; (8008128 <USBD_SetConfig+0x118>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff f9e8 	bl	800743c <USBD_SetClassConfig>
 800806c:	4603      	mov	r3, r0
 800806e:	2b02      	cmp	r3, #2
 8008070:	d104      	bne.n	800807c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f932 	bl	80082de <USBD_CtlError>
            return;
 800807a:	e052      	b.n	8008122 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f9f6 	bl	800846e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008082:	e04e      	b.n	8008122 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9f2 	bl	800846e <USBD_CtlSendStatus>
        break;
 800808a:	e04a      	b.n	8008122 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800808c:	4b26      	ldr	r3, [pc, #152]	; (8008128 <USBD_SetConfig+0x118>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d112      	bne.n	80080ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800809c:	4b22      	ldr	r3, [pc, #136]	; (8008128 <USBD_SetConfig+0x118>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80080a6:	4b20      	ldr	r3, [pc, #128]	; (8008128 <USBD_SetConfig+0x118>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff f9e4 	bl	800747a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9db 	bl	800846e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080b8:	e033      	b.n	8008122 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <USBD_SetConfig+0x118>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d01d      	beq.n	8008104 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff f9d2 	bl	800747a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80080d6:	4b14      	ldr	r3, [pc, #80]	; (8008128 <USBD_SetConfig+0x118>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <USBD_SetConfig+0x118>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff f9a8 	bl	800743c <USBD_SetClassConfig>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d104      	bne.n	80080fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8f2 	bl	80082de <USBD_CtlError>
            return;
 80080fa:	e012      	b.n	8008122 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f9b6 	bl	800846e <USBD_CtlSendStatus>
        break;
 8008102:	e00e      	b.n	8008122 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f9b2 	bl	800846e <USBD_CtlSendStatus>
        break;
 800810a:	e00a      	b.n	8008122 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8e5 	bl	80082de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <USBD_SetConfig+0x118>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff f9ad 	bl	800747a <USBD_ClrClassConfig>
        break;
 8008120:	bf00      	nop
    }
  }
}
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000199 	.word	0x20000199

0800812c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d004      	beq.n	8008148 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f8cc 	bl	80082de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008146:	e022      	b.n	800818e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814e:	2b02      	cmp	r3, #2
 8008150:	dc02      	bgt.n	8008158 <USBD_GetConfig+0x2c>
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc03      	bgt.n	800815e <USBD_GetConfig+0x32>
 8008156:	e015      	b.n	8008184 <USBD_GetConfig+0x58>
 8008158:	2b03      	cmp	r3, #3
 800815a:	d00b      	beq.n	8008174 <USBD_GetConfig+0x48>
 800815c:	e012      	b.n	8008184 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3308      	adds	r3, #8
 8008168:	2201      	movs	r2, #1
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f920 	bl	80083b2 <USBD_CtlSendData>
        break;
 8008172:	e00c      	b.n	800818e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3304      	adds	r3, #4
 8008178:	2201      	movs	r2, #1
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f918 	bl	80083b2 <USBD_CtlSendData>
        break;
 8008182:	e004      	b.n	800818e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8a9 	bl	80082de <USBD_CtlError>
        break;
 800818c:	bf00      	nop
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d81e      	bhi.n	80081ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	88db      	ldrh	r3, [r3, #6]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d004      	beq.n	80081be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f891 	bl	80082de <USBD_CtlError>
        break;
 80081bc:	e01a      	b.n	80081f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2201      	movs	r2, #1
 80081c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f043 0202 	orr.w	r2, r3, #2
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	330c      	adds	r3, #12
 80081de:	2202      	movs	r2, #2
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8e5 	bl	80083b2 <USBD_CtlSendData>
      break;
 80081e8:	e004      	b.n	80081f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f876 	bl	80082de <USBD_CtlError>
      break;
 80081f2:	bf00      	nop
  }
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	885b      	ldrh	r3, [r3, #2]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d106      	bne.n	800821c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f929 	bl	800846e <USBD_CtlSendStatus>
  }
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008234:	3b01      	subs	r3, #1
 8008236:	2b02      	cmp	r3, #2
 8008238:	d80b      	bhi.n	8008252 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10c      	bne.n	800825c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f90f 	bl	800846e <USBD_CtlSendStatus>
      }
      break;
 8008250:	e004      	b.n	800825c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f842 	bl	80082de <USBD_CtlError>
      break;
 800825a:	e000      	b.n	800825e <USBD_ClrFeature+0x3a>
      break;
 800825c:	bf00      	nop
  }
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	785a      	ldrb	r2, [r3, #1]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	3302      	adds	r3, #2
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b29a      	uxth	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	3303      	adds	r3, #3
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	b29b      	uxth	r3, r3
 8008294:	4413      	add	r3, r2
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	3304      	adds	r3, #4
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	3305      	adds	r3, #5
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	3306      	adds	r3, #6
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	3307      	adds	r3, #7
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4413      	add	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	80da      	strh	r2, [r3, #6]

}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082e8:	2180      	movs	r1, #128	; 0x80
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fc34 	bl	8008b58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082f0:	2100      	movs	r1, #0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc30 	bl	8008b58 <USBD_LL_StallEP>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d032      	beq.n	800837c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f834 	bl	8008384 <USBD_GetLen>
 800831c:	4603      	mov	r3, r0
 800831e:	3301      	adds	r3, #1
 8008320:	b29b      	uxth	r3, r3
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	75fa      	strb	r2, [r7, #23]
 8008330:	461a      	mov	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	7812      	ldrb	r2, [r2, #0]
 800833a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	75fa      	strb	r2, [r7, #23]
 8008342:	461a      	mov	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	2203      	movs	r2, #3
 800834a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800834c:	e012      	b.n	8008374 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	60fa      	str	r2, [r7, #12]
 8008354:	7dfa      	ldrb	r2, [r7, #23]
 8008356:	1c51      	adds	r1, r2, #1
 8008358:	75f9      	strb	r1, [r7, #23]
 800835a:	4611      	mov	r1, r2
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	440a      	add	r2, r1
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	75fa      	strb	r2, [r7, #23]
 800836a:	461a      	mov	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4413      	add	r3, r2
 8008370:	2200      	movs	r2, #0
 8008372:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e8      	bne.n	800834e <USBD_GetString+0x4e>
    }
  }
}
 800837c:	bf00      	nop
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008390:	e005      	b.n	800839e <USBD_GetLen+0x1a>
  {
    len++;
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	3301      	adds	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3301      	adds	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f5      	bne.n	8008392 <USBD_GetLen+0xe>
  }

  return len;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr

080083b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	4613      	mov	r3, r2
 80083be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083c8:	88fa      	ldrh	r2, [r7, #6]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	2100      	movs	r1, #0
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fc45 	bl	8008c6a <USBD_LL_Transmit>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fc33 	bl	8008c6a <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	4613      	mov	r3, r2
 800841a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2203      	movs	r2, #3
 8008420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	2100      	movs	r1, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fc38 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	4613      	mov	r3, r2
 8008456:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fc26 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2204      	movs	r2, #4
 800847a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800847e:	2300      	movs	r3, #0
 8008480:	2200      	movs	r2, #0
 8008482:	2100      	movs	r1, #0
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fbf0 	bl	8008c6a <USBD_LL_Transmit>

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2205      	movs	r2, #5
 80084a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084a4:	2300      	movs	r3, #0
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fc00 	bl	8008cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084c0:	2200      	movs	r2, #0
 80084c2:	4912      	ldr	r1, [pc, #72]	; (800850c <MX_USB_DEVICE_Init+0x50>)
 80084c4:	4812      	ldr	r0, [pc, #72]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084c6:	f7fe ff5f 	bl	8007388 <USBD_Init>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084d0:	f7f8 fb3c 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084d4:	490f      	ldr	r1, [pc, #60]	; (8008514 <MX_USB_DEVICE_Init+0x58>)
 80084d6:	480e      	ldr	r0, [pc, #56]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084d8:	f7fe ff81 	bl	80073de <USBD_RegisterClass>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084e2:	f7f8 fb33 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084e6:	490c      	ldr	r1, [pc, #48]	; (8008518 <MX_USB_DEVICE_Init+0x5c>)
 80084e8:	4809      	ldr	r0, [pc, #36]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084ea:	f7fe fee1 	bl	80072b0 <USBD_CDC_RegisterInterface>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084f4:	f7f8 fb2a 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084f8:	4805      	ldr	r0, [pc, #20]	; (8008510 <MX_USB_DEVICE_Init+0x54>)
 80084fa:	f7fe ff89 	bl	8007410 <USBD_Start>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008504:	f7f8 fb22 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008508:	bf00      	nop
 800850a:	bd80      	pop	{r7, pc}
 800850c:	2000012c 	.word	0x2000012c
 8008510:	20000538 	.word	0x20000538
 8008514:	20000018 	.word	0x20000018
 8008518:	2000011c 	.word	0x2000011c

0800851c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008520:	2200      	movs	r2, #0
 8008522:	4905      	ldr	r1, [pc, #20]	; (8008538 <CDC_Init_FS+0x1c>)
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <CDC_Init_FS+0x20>)
 8008526:	f7fe fed9 	bl	80072dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800852a:	4905      	ldr	r1, [pc, #20]	; (8008540 <CDC_Init_FS+0x24>)
 800852c:	4803      	ldr	r0, [pc, #12]	; (800853c <CDC_Init_FS+0x20>)
 800852e:	f7fe feee 	bl	800730e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008534:	4618      	mov	r0, r3
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000be4 	.word	0x20000be4
 800853c:	20000538 	.word	0x20000538
 8008540:	200007fc 	.word	0x200007fc

08008544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800854a:	4618      	mov	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
	...

08008554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
 8008560:	4613      	mov	r3, r2
 8008562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b23      	cmp	r3, #35	; 0x23
 8008568:	d84a      	bhi.n	8008600 <CDC_Control_FS+0xac>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <CDC_Control_FS+0x1c>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	08008601 	.word	0x08008601
 8008584:	08008601 	.word	0x08008601
 8008588:	08008601 	.word	0x08008601
 800858c:	08008601 	.word	0x08008601
 8008590:	08008601 	.word	0x08008601
 8008594:	08008601 	.word	0x08008601
 8008598:	08008601 	.word	0x08008601
 800859c:	08008601 	.word	0x08008601
 80085a0:	08008601 	.word	0x08008601
 80085a4:	08008601 	.word	0x08008601
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008601 	.word	0x08008601
 80085b0:	08008601 	.word	0x08008601
 80085b4:	08008601 	.word	0x08008601
 80085b8:	08008601 	.word	0x08008601
 80085bc:	08008601 	.word	0x08008601
 80085c0:	08008601 	.word	0x08008601
 80085c4:	08008601 	.word	0x08008601
 80085c8:	08008601 	.word	0x08008601
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008601 	.word	0x08008601
 80085d4:	08008601 	.word	0x08008601
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008601 	.word	0x08008601
 80085e8:	08008601 	.word	0x08008601
 80085ec:	08008601 	.word	0x08008601
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008601 	.word	0x08008601
 80085f8:	08008601 	.word	0x08008601
 80085fc:	08008601 	.word	0x08008601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008600:	bf00      	nop
  }

  return (USBD_OK);
 8008602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_TogglePin(uLED1_GPIO_Port, uLED1_Pin);
 800861a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800861e:	4807      	ldr	r0, [pc, #28]	; (800863c <CDC_Receive_FS+0x2c>)
 8008620:	f7f9 fa37 	bl	8001a92 <HAL_GPIO_TogglePin>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4806      	ldr	r0, [pc, #24]	; (8008640 <CDC_Receive_FS+0x30>)
 8008628:	f7fe fe71 	bl	800730e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800862c:	4804      	ldr	r0, [pc, #16]	; (8008640 <CDC_Receive_FS+0x30>)
 800862e:	f7fe fe81 	bl	8007334 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40011000 	.word	0x40011000
 8008640:	20000538 	.word	0x20000538

08008644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2212      	movs	r2, #18
 8008654:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008656:	4b03      	ldr	r3, [pc, #12]	; (8008664 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20000148 	.word	0x20000148

08008668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2204      	movs	r2, #4
 8008678:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800867a:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	2000015c 	.word	0x2000015c

0800868c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086a4:	f7ff fe2c 	bl	8008300 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fe26 	bl	8008300 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000fcc 	.word	0x20000fcc
 80086c4:	08008e34 	.word	0x08008e34

080086c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	4904      	ldr	r1, [pc, #16]	; (80086e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086d8:	4804      	ldr	r0, [pc, #16]	; (80086ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086da:	f7ff fe11 	bl	8008300 <USBD_GetString>
  return USBD_StrDesc;
 80086de:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000fcc 	.word	0x20000fcc
 80086ec:	08008e4c 	.word	0x08008e4c

080086f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	221a      	movs	r2, #26
 8008700:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008702:	f000 f843 	bl	800878c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008706:	4b02      	ldr	r3, [pc, #8]	; (8008710 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000160 	.word	0x20000160

08008714 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4907      	ldr	r1, [pc, #28]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
 800872a:	4808      	ldr	r0, [pc, #32]	; (800874c <USBD_FS_ConfigStrDescriptor+0x38>)
 800872c:	f7ff fde8 	bl	8008300 <USBD_GetString>
 8008730:	e004      	b.n	800873c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4904      	ldr	r1, [pc, #16]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4805      	ldr	r0, [pc, #20]	; (800874c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fde2 	bl	8008300 <USBD_GetString>
  }
  return USBD_StrDesc;
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000fcc 	.word	0x20000fcc
 800874c:	08008e60 	.word	0x08008e60

08008750 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4907      	ldr	r1, [pc, #28]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008766:	4808      	ldr	r0, [pc, #32]	; (8008788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008768:	f7ff fdca 	bl	8008300 <USBD_GetString>
 800876c:	e004      	b.n	8008778 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4904      	ldr	r1, [pc, #16]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4805      	ldr	r0, [pc, #20]	; (8008788 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fdc4 	bl	8008300 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000fcc 	.word	0x20000fcc
 8008788:	08008e6c 	.word	0x08008e6c

0800878c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <Get_SerialNum+0x44>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008798:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <Get_SerialNum+0x48>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800879e:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <Get_SerialNum+0x4c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087b2:	2208      	movs	r2, #8
 80087b4:	4909      	ldr	r1, [pc, #36]	; (80087dc <Get_SerialNum+0x50>)
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f814 	bl	80087e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087bc:	2204      	movs	r2, #4
 80087be:	4908      	ldr	r1, [pc, #32]	; (80087e0 <Get_SerialNum+0x54>)
 80087c0:	68b8      	ldr	r0, [r7, #8]
 80087c2:	f000 f80f 	bl	80087e4 <IntToUnicode>
  }
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	1ffff7e8 	.word	0x1ffff7e8
 80087d4:	1ffff7ec 	.word	0x1ffff7ec
 80087d8:	1ffff7f0 	.word	0x1ffff7f0
 80087dc:	20000162 	.word	0x20000162
 80087e0:	20000172 	.word	0x20000172

080087e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]
 80087fa:	e027      	b.n	800884c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	2b09      	cmp	r3, #9
 8008802:	d80b      	bhi.n	800881c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0f1b      	lsrs	r3, r3, #28
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	4619      	mov	r1, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	440b      	add	r3, r1
 8008814:	3230      	adds	r2, #48	; 0x30
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	e00a      	b.n	8008832 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	0f1b      	lsrs	r3, r3, #28
 8008820:	b2da      	uxtb	r2, r3
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	4619      	mov	r1, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	440b      	add	r3, r1
 800882c:	3237      	adds	r2, #55	; 0x37
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	3301      	adds	r3, #1
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	3301      	adds	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
 800884c:	7dfa      	ldrb	r2, [r7, #23]
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	429a      	cmp	r2, r3
 8008852:	d3d3      	bcc.n	80087fc <IntToUnicode+0x18>
  }
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a0d      	ldr	r2, [pc, #52]	; (80088a4 <HAL_PCD_MspInit+0x44>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d113      	bne.n	800889a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008872:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	4a0c      	ldr	r2, [pc, #48]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800887c:	61d3      	str	r3, [r2, #28]
 800887e:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <HAL_PCD_MspInit+0x48>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800888a:	2200      	movs	r2, #0
 800888c:	2100      	movs	r1, #0
 800888e:	2014      	movs	r0, #20
 8008890:	f7f8 ff15 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008894:	2014      	movs	r0, #20
 8008896:	f7f8 ff2e 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	40005c00 	.word	0x40005c00
 80088a8:	40021000 	.word	0x40021000

080088ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f7fe fdec 	bl	80074a0 <USBD_LL_SetupStage>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	440b      	add	r3, r1
 80088f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	4619      	mov	r1, r3
 80088fa:	f7fe fe1e 	bl	800753a <USBD_LL_DataOutStage>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	440b      	add	r3, r1
 8008926:	333c      	adds	r3, #60	; 0x3c
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	4619      	mov	r1, r3
 800892e:	f7fe fe75 	bl	800761c <USBD_LL_DataInStage>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe ff85 	bl	8007858 <USBD_LL_SOF>
}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800895e:	2301      	movs	r3, #1
 8008960:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d001      	beq.n	800896e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800896a:	f7f8 f8ef 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe ff35 	bl	80077e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe feee 	bl	8007766 <USBD_LL_Reset>
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe ff2f 	bl	8007806 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <HAL_PCD_SuspendCallback+0x30>)
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	4a03      	ldr	r2, [pc, #12]	; (80089c4 <HAL_PCD_SuspendCallback+0x30>)
 80089b6:	f043 0306 	orr.w	r3, r3, #6
 80089ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed00 	.word	0xe000ed00

080089c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe ff29 	bl	800782e <USBD_LL_Resume>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089ec:	4a28      	ldr	r2, [pc, #160]	; (8008a90 <USBD_LL_Init+0xac>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a26      	ldr	r2, [pc, #152]	; (8008a90 <USBD_LL_Init+0xac>)
 80089f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089fc:	4b24      	ldr	r3, [pc, #144]	; (8008a90 <USBD_LL_Init+0xac>)
 80089fe:	4a25      	ldr	r2, [pc, #148]	; (8008a94 <USBD_LL_Init+0xb0>)
 8008a00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a02:	4b23      	ldr	r3, [pc, #140]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a04:	2208      	movs	r2, #8
 8008a06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a08:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a0e:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a14:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a1a:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a20:	481b      	ldr	r0, [pc, #108]	; (8008a90 <USBD_LL_Init+0xac>)
 8008a22:	f7f9 f84f 	bl	8001ac4 <HAL_PCD_Init>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a2c:	f7f8 f88e 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a36:	2318      	movs	r3, #24
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f7fa fb91 	bl	8003162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a46:	2358      	movs	r3, #88	; 0x58
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2180      	movs	r1, #128	; 0x80
 8008a4c:	f7fa fb89 	bl	8003162 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a56:	23c0      	movs	r3, #192	; 0xc0
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2181      	movs	r1, #129	; 0x81
 8008a5c:	f7fa fb81 	bl	8003162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	f7fa fb78 	bl	8003162 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2182      	movs	r1, #130	; 0x82
 8008a80:	f7fa fb6f 	bl	8003162 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200011cc 	.word	0x200011cc
 8008a94:	40005c00 	.word	0x40005c00

08008a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7f9 f913 	bl	8001cda <HAL_PCD_Start>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f94e 	bl	8008d5c <USBD_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	461a      	mov	r2, r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	70fb      	strb	r3, [r7, #3]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70bb      	strb	r3, [r7, #2]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008af6:	78bb      	ldrb	r3, [r7, #2]
 8008af8:	883a      	ldrh	r2, [r7, #0]
 8008afa:	78f9      	ldrb	r1, [r7, #3]
 8008afc:	f7f9 fa8d 	bl	800201a <HAL_PCD_EP_Open>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f928 	bl	8008d5c <USBD_Get_USB_Status>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7f9 fad4 	bl	80020e6 <HAL_PCD_EP_Close>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 f909 	bl	8008d5c <USBD_Get_USB_Status>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7f9 fb94 	bl	80022a4 <HAL_PCD_EP_SetStall>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f8ea 	bl	8008d5c <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f9 fbd5 	bl	8002364 <HAL_PCD_EP_ClrStall>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f8cb 	bl	8008d5c <USBD_Get_USB_Status>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008be6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	da0c      	bge.n	8008c0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	440b      	add	r3, r1
 8008c04:	3302      	adds	r3, #2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	e00b      	b.n	8008c22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c10:	68f9      	ldr	r1, [r7, #12]
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	440b      	add	r3, r1
 8008c1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr

08008c2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f9 f9c0 	bl	8001fd0 <HAL_PCD_SetAddress>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f880 	bl	8008d5c <USBD_Get_USB_Status>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	461a      	mov	r2, r3
 8008c76:	460b      	mov	r3, r1
 8008c78:	72fb      	strb	r3, [r7, #11]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c8c:	893b      	ldrh	r3, [r7, #8]
 8008c8e:	7af9      	ldrb	r1, [r7, #11]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	f7f9 fac4 	bl	800221e <HAL_PCD_EP_Transmit>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f85d 	bl	8008d5c <USBD_Get_USB_Status>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	72fb      	strb	r3, [r7, #11]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cd2:	893b      	ldrh	r3, [r7, #8]
 8008cd4:	7af9      	ldrb	r1, [r7, #11]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f7f9 fa4d 	bl	8002176 <HAL_PCD_EP_Receive>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 f83a 	bl	8008d5c <USBD_Get_USB_Status>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cec:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f9 fa6f 	bl	80021f0 <HAL_PCD_EP_GetRxCount>
 8008d12:	4603      	mov	r3, r0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_static_malloc+0x14>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr
 8008d30:	2000019c 	.word	0x2000019c

08008d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc80      	pop	{r7}
 8008d44:	4770      	bx	lr

08008d46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d817      	bhi.n	8008da0 <USBD_Get_USB_Status+0x44>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_Get_USB_Status+0x1c>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d8f 	.word	0x08008d8f
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d9b 	.word	0x08008d9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e00b      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e008      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e005      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e002      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008da0:	2302      	movs	r3, #2
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }
  return usb_status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop

08008db4 <__libc_init_array>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	2600      	movs	r6, #0
 8008db8:	4d0c      	ldr	r5, [pc, #48]	; (8008dec <__libc_init_array+0x38>)
 8008dba:	4c0d      	ldr	r4, [pc, #52]	; (8008df0 <__libc_init_array+0x3c>)
 8008dbc:	1b64      	subs	r4, r4, r5
 8008dbe:	10a4      	asrs	r4, r4, #2
 8008dc0:	42a6      	cmp	r6, r4
 8008dc2:	d109      	bne.n	8008dd8 <__libc_init_array+0x24>
 8008dc4:	f000 f822 	bl	8008e0c <_init>
 8008dc8:	2600      	movs	r6, #0
 8008dca:	4d0a      	ldr	r5, [pc, #40]	; (8008df4 <__libc_init_array+0x40>)
 8008dcc:	4c0a      	ldr	r4, [pc, #40]	; (8008df8 <__libc_init_array+0x44>)
 8008dce:	1b64      	subs	r4, r4, r5
 8008dd0:	10a4      	asrs	r4, r4, #2
 8008dd2:	42a6      	cmp	r6, r4
 8008dd4:	d105      	bne.n	8008de2 <__libc_init_array+0x2e>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ddc:	4798      	blx	r3
 8008dde:	3601      	adds	r6, #1
 8008de0:	e7ee      	b.n	8008dc0 <__libc_init_array+0xc>
 8008de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de6:	4798      	blx	r3
 8008de8:	3601      	adds	r6, #1
 8008dea:	e7f2      	b.n	8008dd2 <__libc_init_array+0x1e>
 8008dec:	08008e94 	.word	0x08008e94
 8008df0:	08008e94 	.word	0x08008e94
 8008df4:	08008e94 	.word	0x08008e94
 8008df8:	08008e98 	.word	0x08008e98

08008dfc <memset>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4402      	add	r2, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
